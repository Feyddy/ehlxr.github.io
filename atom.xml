<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Ehlxr&#39;s Blog</title>
  <subtitle>世界那么大，在此安个家...</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://ehlxr.me/"/>
  <updated>2017-01-07T11:40:26.212Z</updated>
  <id>http://ehlxr.me/</id>
  
  <author>
    <name>小桥流水人家</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>CentOS 7 安装Python3、pip3</title>
    <link href="http://ehlxr.me/2017/01/07/CentOS-7-%E5%AE%89%E8%A3%85-Python3%E3%80%81pip3/"/>
    <id>http://ehlxr.me/2017/01/07/CentOS-7-安装-Python3、pip3/</id>
    <published>2017-01-07T11:23:22.000Z</published>
    <updated>2017-01-07T11:40:26.212Z</updated>
    
    <content type="html"><![CDATA[<p>CentOS 7 默认安装了 Python 2，当需要使用 Python 3 的时候，可以手动下载 Python 源码后编译安装。</p>
<h1 id="一、安装-Python-3"><a href="#一、安装-Python-3" class="headerlink" title="一、安装 Python 3"></a>一、安装 Python 3</h1><h2 id="1-1-安装准备"><a href="#1-1-安装准备" class="headerlink" title="1.1 安装准备"></a>1.1 安装准备</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line">$ sudo mkdir /usr/<span class="built_in">local</span>/python3 <span class="comment"># 创建安装目录</span></div><div class="line"></div><div class="line"><span class="comment"># 下载 Python 源文件</span></div><div class="line">$ wget --no-check-certificate https://www.python.org/ftp/python/3.6.0/Python-3.6.0.tgz</div><div class="line"><span class="comment"># 注意：wget获取https的时候要加上：--no-check-certificate</span></div><div class="line"></div><div class="line">$ tar -xzvf Python-3.6.0.tgz <span class="comment"># 解压缩包</span></div><div class="line"></div><div class="line">$ <span class="built_in">cd</span> Python-3.6.0 <span class="comment"># 进入解压目录</span></div></pre></td></tr></table></figure>
<a id="more"></a>
<h2 id="1-2-编译安装"><a href="#1-2-编译安装" class="headerlink" title="1.2 编译安装"></a>1.2 编译安装</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">$ sudo ./configure --prefix=/usr/<span class="built_in">local</span>/python3 <span class="comment"># 指定创建的目录</span></div><div class="line"></div><div class="line">$ sudo make</div><div class="line"></div><div class="line">$ sudo make install</div></pre></td></tr></table></figure>
<h2 id="1-3-配置"><a href="#1-3-配置" class="headerlink" title="1.3 配置"></a>1.3 配置</h2><h3 id="1-3-1-两个版本共存"><a href="#1-3-1-两个版本共存" class="headerlink" title="1.3.1 两个版本共存"></a>1.3.1 两个版本共存</h3><p>创建 python3 的软链接：</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ sudo ln <span class="_">-s</span> /usr/<span class="built_in">local</span>/python3/bin/python3 /usr/bin/python3</div></pre></td></tr></table></figure>
<p>这样就可以通过 <code>python</code> 命令使用 Python 2，<code>python3</code> 来使用 Python 3。</p>
<h3 id="1-3-2-修改默认为-Python-3"><a href="#1-3-2-修改默认为-Python-3" class="headerlink" title="1.3.2 修改默认为 Python 3"></a>1.3.2 修改默认为 Python 3</h3><p>将 <code>/usr/bin</code> 中的 <code>python</code> 备份</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ sudo mv python python.bak</div></pre></td></tr></table></figure>
<p>然后创建 python3 的软链接</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ sudo ln <span class="_">-s</span> /usr/<span class="built_in">local</span>/python3/bin/python3 /usr/bin/python</div></pre></td></tr></table></figure>
<p>这样默认的 Python 版本就替换为 Python 3 了。</p>
<p>因为 yum 使用 Python 2，因此替换为 Python 3 后可能无法正常工作，因此修改 yum 配置文件</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ sudo vi /usr/bin/yum</div></pre></td></tr></table></figure>
<p>将第一行指定的 python 版本改为 python2.7（<code>#!/usr/bin/python</code> 改为 <code>#!/usr/bin/python2.7</code>）</p>
<h1 id="二、安装-pip"><a href="#二、安装-pip" class="headerlink" title="二、安装 pip"></a>二、安装 pip</h1><h2 id="2-1-yum-安装"><a href="#2-1-yum-安装" class="headerlink" title="2.1 yum 安装"></a>2.1 yum 安装</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="comment"># 首先安装 epel 扩展源</span></div><div class="line">$ sudo yum -y install epel-release</div><div class="line"></div><div class="line"><span class="comment"># 安装 python-pip</span></div><div class="line">$ sudo yum -y install python-pip</div><div class="line"></div><div class="line"><span class="comment"># 清除 cache</span></div><div class="line">$ sudo yum clean all</div></pre></td></tr></table></figure>
<p>通过这种方式貌似只能安装 pip2，想要安装 Python 3 的 pip，可以通过以下的源代码安装方式。</p>
<h2 id="2-2-源码安装"><a href="#2-2-源码安装" class="headerlink" title="2.2 源码安装"></a>2.2 源码安装</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"><span class="comment"># 下载源代码</span></div><div class="line">$ wget --no-check-certificate https://github.com/pypa/pip/archive/9.0.1.tar.gz</div><div class="line"></div><div class="line">$ tar -zvxf 9.0.1 -C pip-9.0.1    <span class="comment"># 解压文件</span></div><div class="line"></div><div class="line">$ <span class="built_in">cd</span> pip-9.0.1</div><div class="line"></div><div class="line"><span class="comment"># 使用 Python 3 安装</span></div><div class="line">$ python3 setup.py install</div></pre></td></tr></table></figure>
<p>创建链接：</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ sudo ln <span class="_">-s</span> /usr/<span class="built_in">local</span>/python3/bin/pip /usr/bin/pip3</div></pre></td></tr></table></figure>
<h2 id="2-3-升级-pip"><a href="#2-3-升级-pip" class="headerlink" title="2.3 升级 pip"></a>2.3 升级 pip</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ pip install --upgrade pip</div></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;CentOS 7 默认安装了 Python 2，当需要使用 Python 3 的时候，可以手动下载 Python 源码后编译安装。&lt;/p&gt;
&lt;h1 id=&quot;一、安装-Python-3&quot;&gt;&lt;a href=&quot;#一、安装-Python-3&quot; class=&quot;headerlink&quot; title=&quot;一、安装 Python 3&quot;&gt;&lt;/a&gt;一、安装 Python 3&lt;/h1&gt;&lt;h2 id=&quot;1-1-安装准备&quot;&gt;&lt;a href=&quot;#1-1-安装准备&quot; class=&quot;headerlink&quot; title=&quot;1.1 安装准备&quot;&gt;&lt;/a&gt;1.1 安装准备&lt;/h2&gt;&lt;figure class=&quot;highlight bash&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;2&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;3&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;4&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;5&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;6&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;7&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;8&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;9&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;$ sudo mkdir /usr/&lt;span class=&quot;built_in&quot;&gt;local&lt;/span&gt;/python3 &lt;span class=&quot;comment&quot;&gt;# 创建安装目录&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;# 下载 Python 源文件&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;$ wget --no-check-certificate https://www.python.org/ftp/python/3.6.0/Python-3.6.0.tgz&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;# 注意：wget获取https的时候要加上：--no-check-certificate&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;$ tar -xzvf Python-3.6.0.tgz &lt;span class=&quot;comment&quot;&gt;# 解压缩包&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;$ &lt;span class=&quot;built_in&quot;&gt;cd&lt;/span&gt; Python-3.6.0 &lt;span class=&quot;comment&quot;&gt;# 进入解压目录&lt;/span&gt;&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
    
    </summary>
    
      <category term="Linux" scheme="http://ehlxr.me/categories/Linux/"/>
    
    
      <category term="Linux" scheme="http://ehlxr.me/tags/Linux/"/>
    
      <category term="CentOS" scheme="http://ehlxr.me/tags/CentOS/"/>
    
      <category term="Python" scheme="http://ehlxr.me/tags/Python/"/>
    
  </entry>
  
  <entry>
    <title>Good bye 2016...</title>
    <link href="http://ehlxr.me/2016/12/31/Good-bye-2016/"/>
    <id>http://ehlxr.me/2016/12/31/Good-bye-2016/</id>
    <published>2016-12-31T04:51:14.000Z</published>
    <updated>2016-12-31T06:16:20.063Z</updated>
    
    <content type="html"><![CDATA[<p>时光飞逝，转眼间，2016 年已经在今天画上句号，结束了，再提起 2016 年就已经是过往了…</p>
<p>印象中，十年应该要算是很长的一段时间吧，但仔细一琢磨十年前也就才 2006 年…那时候是高中，每天除了上课就是写作业，学习很枯燥总感觉时间很多，憧憬着美好的未来，过着也算是无忧无虑生活。每天放学，下晚自习，总是很快的骑着自行车冲出校门口，因为晚了学生会很多，那时候骑自行车一个比一个快。周五不用上晚自习，三五成群去网吧通宵，包宿八块钱八个小时，从晚上十点到第二天早上六点，六点从网吧出来总会有种恍如隔世的感觉，大街上几乎没有人，回出租屋睡上一天，感觉就是一周最美好的时光了！看着别的同学拿着小灵通、MP3 ，很羡慕，自已也想要有一个，都不敢奢望能有一台电脑…一切仿佛也就是昨天而已，但是已经十年之前了，不禁一颤，人生能有几个十年…</p>
<a id="more"></a>
<p>总结 2016，收获，知足，感恩…眼前的要珍惜，来之不易的拥有更要珍惜。</p>
<iframe frameborder="no" border="0" marginwidth="0" marginheight="0" width="100%" height="86" src="//music.163.com/outchain/player?type=2&id=35307971&auto=1&height=66"></iframe>

<hr>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;时光飞逝，转眼间，2016 年已经在今天画上句号，结束了，再提起 2016 年就已经是过往了…&lt;/p&gt;
&lt;p&gt;印象中，十年应该要算是很长的一段时间吧，但仔细一琢磨十年前也就才 2006 年…那时候是高中，每天除了上课就是写作业，学习很枯燥总感觉时间很多，憧憬着美好的未来，过着也算是无忧无虑生活。每天放学，下晚自习，总是很快的骑着自行车冲出校门口，因为晚了学生会很多，那时候骑自行车一个比一个快。周五不用上晚自习，三五成群去网吧通宵，包宿八块钱八个小时，从晚上十点到第二天早上六点，六点从网吧出来总会有种恍如隔世的感觉，大街上几乎没有人，回出租屋睡上一天，感觉就是一周最美好的时光了！看着别的同学拿着小灵通、MP3 ，很羡慕，自已也想要有一个，都不敢奢望能有一台电脑…一切仿佛也就是昨天而已，但是已经十年之前了，不禁一颤，人生能有几个十年…&lt;/p&gt;
    
    </summary>
    
      <category term="杂谈" scheme="http://ehlxr.me/categories/%E6%9D%82%E8%B0%88/"/>
    
    
      <category term="杂谈" scheme="http://ehlxr.me/tags/%E6%9D%82%E8%B0%88/"/>
    
  </entry>
  
  <entry>
    <title>[转]Linux shell 中单引号、双引号、反引号、反斜杠的区别</title>
    <link href="http://ehlxr.me/2016/12/30/%E8%BD%AC-Linux-shell-%E4%B8%AD%E5%8D%95%E5%BC%95%E5%8F%B7%E3%80%81%E5%8F%8C%E5%BC%95%E5%8F%B7%E3%80%81%E5%8F%8D%E5%BC%95%E5%8F%B7%E3%80%81%E5%8F%8D%E6%96%9C%E6%9D%A0%E7%9A%84%E5%8C%BA%E5%88%AB/"/>
    <id>http://ehlxr.me/2016/12/30/转-Linux-shell-中单引号、双引号、反引号、反斜杠的区别/</id>
    <published>2016-12-30T07:36:51.000Z</published>
    <updated>2016-12-30T07:48:33.931Z</updated>
    
    <content type="html"><![CDATA[<blockquote>
<p><code>shell</code> 可以识别 <code>4</code> 种不同类型的引字符号：单引号字符 <code>&#39;</code>，双引号字符 <code>&quot;</code>，反斜杠字符 <code>\</code>，反引号字符 <code>`</code> ，学习 <code>shell</code> 编程的朋友可以看下。</p>
</blockquote>
<h1 id="1-单引号-39"><a href="#1-单引号-39" class="headerlink" title="1. 单引号( &#39; )"></a>1. 单引号( <code>&#39;</code> )</h1><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">$ grep Susan phonebook</div><div class="line">Susan Goldberg 403-212-4921</div><div class="line">Susan Topple 212-234-2343</div></pre></td></tr></table></figure>
<p>如果我们想查找的是 <code>Susan Goldberg</code>，不能直接使用 <code>grep Susan Goldberg phonebook</code> 命令，<code>grep</code> 会把 <code>Goldberg</code> 和 <code>phonebook</code> 当作需要搜索的文件。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">$ grep &apos;Susan Gold&apos; phonebook</div><div class="line">Susan Goldberg 403-212-4921</div></pre></td></tr></table></figure>
<p>当 <code>shell</code> 碰到第一个单引号时，它忽略掉其后直到右引号的所有特殊字符。<br><a id="more"></a></p>
<h1 id="2-双引号-quot"><a href="#2-双引号-quot" class="headerlink" title="2. 双引号( &quot; )"></a>2. 双引号( <code>&quot;</code> )</h1><p>双引号作用与单引号类似，区别在于它没有那么严格。单引号告诉 <code>shell</code> 忽略所有特殊字符，而双引号只要求忽略大多数，具体说，括在双引号中的三种特殊字符不被忽略：<code>$</code>、<code>\</code>、<code>`</code>。即双引号会解释字符串的特别意思，而单引号直接使用字符串。如果使用双引号将字符串赋给变量并反馈它，实际上与直接反馈变量并无差别。如果要查询包含空格的字符串，经常会用到双引号。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line">$ x=*</div><div class="line">$ echo $x</div><div class="line">hello.sh menus.sh misc.sh phonebook tshift.sh</div><div class="line"></div><div class="line">$ echo &apos;$x&apos;</div><div class="line">$x</div><div class="line"></div><div class="line">$ echo &quot;$x&quot;</div><div class="line">*</div></pre></td></tr></table></figure>
<p>这个例子可以看出无引号，单引号和双引号之间的区别。在最后一种情况中，双引号告诉 <code>shell</code> 在引号内照样进行变量名替换，所以 <code>shell</code> 把 <code>$x</code> 替换为 <code>＊</code>，因为双引号中不做文件名替换，所以就把 <code>＊</code> 作为要显示的值传递给 <code>echo</code>。</p>
<p>对于第一种情况需要进一步说明，<code>shell</code> 在给变量赋值时不进行文件名替换（这从第三种情况中也能看出来），各步骤发生的精确次序如下： <code>shell</code> 扫描命令行，把 <code>x</code> 的值设为星号 <code>＊</code>；<br><code>shell</code> 再次扫描命令行，碰到星号 <code>＊</code>，把它替换成当前目录下的文件清单；<code>shell</code> 启动执行 <code>echo</code> 命令，把文件清单作为参数传递给 <code>echo</code>。</p>
<p>这个赋值的先后次序非常重要：<code>shell</code> 先作变量替换，然后作文件名替换，最后把这行处理为参数。</p>
<h1 id="3-反引号"><a href="#3-反引号" class="headerlink" title="3. 反引号(`)"></a>3. 反引号(<code>`</code>)</h1><p>命令替换是指 <code>shell</code> 能够将一个命令的标准输出插在一个命令行中任何位置。<code>shell</code> 中有两种方法作命令替换：把 <code>shell</code> 命令用反引号或者 <code>$(...)</code> 结构括起来，其中 <code>$(...)</code> 格式受到 <code>POSIX</code> 标准支持，也利于嵌套。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">$ echo The date and time is `date`</div><div class="line">The date and time is 2016年 12月 28日 星期三 16:15:44 CST</div><div class="line"></div><div class="line">$ echo The date and time is $(date)</div><div class="line">The date and time is 2016年 12月 28日 星期三 16:15:44 CST</div><div class="line"></div><div class="line">$ echo Your current working directory is $(pwd)</div><div class="line">Your current working directory is /home/howard/script</div></pre></td></tr></table></figure>
<h1 id="4-反斜杠-backslash-escaped"><a href="#4-反斜杠-backslash-escaped" class="headerlink" title="4. 反斜杠 backslash-escaped( \ )"></a>4. 反斜杠 backslash-escaped( <code>\</code> )</h1><p>反斜杠一般用作转义字符，或称逃脱字符。<code>Linux</code> 如果 <code>echo</code> 要让转义字符发生作用，就要使用 <code>-e</code> 选项，且转义字符要使用双引号。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">echo -e &quot;\n&quot;</div></pre></td></tr></table></figure>
<p>反斜杠的另一种作用，就是当反斜杠用于一行的最后一个字符时，<strong><code>shell</code> 把行尾的反斜杠作为续行</strong>，这种结构在分几行输入长命令时经常使用。</p>
<hr>
<p><a href="http://www.jb51.net/article/33495.htm" target="_blank" rel="external">原文地址</a></p>
]]></content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt;&lt;code&gt;shell&lt;/code&gt; 可以识别 &lt;code&gt;4&lt;/code&gt; 种不同类型的引字符号：单引号字符 &lt;code&gt;&amp;#39;&lt;/code&gt;，双引号字符 &lt;code&gt;&amp;quot;&lt;/code&gt;，反斜杠字符 &lt;code&gt;\&lt;/code&gt;，反引号字符 &lt;code&gt;`&lt;/code&gt; ，学习 &lt;code&gt;shell&lt;/code&gt; 编程的朋友可以看下。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h1 id=&quot;1-单引号-39&quot;&gt;&lt;a href=&quot;#1-单引号-39&quot; class=&quot;headerlink&quot; title=&quot;1. 单引号( &amp;#39; )&quot;&gt;&lt;/a&gt;1. 单引号( &lt;code&gt;&amp;#39;&lt;/code&gt; )&lt;/h1&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;2&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;3&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;$ grep Susan phonebook&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;Susan Goldberg 403-212-4921&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;Susan Topple 212-234-2343&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;如果我们想查找的是 &lt;code&gt;Susan Goldberg&lt;/code&gt;，不能直接使用 &lt;code&gt;grep Susan Goldberg phonebook&lt;/code&gt; 命令，&lt;code&gt;grep&lt;/code&gt; 会把 &lt;code&gt;Goldberg&lt;/code&gt; 和 &lt;code&gt;phonebook&lt;/code&gt; 当作需要搜索的文件。&lt;/p&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;2&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;$ grep &amp;apos;Susan Gold&amp;apos; phonebook&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;Susan Goldberg 403-212-4921&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;当 &lt;code&gt;shell&lt;/code&gt; 碰到第一个单引号时，它忽略掉其后直到右引号的所有特殊字符。&lt;br&gt;
    
    </summary>
    
      <category term="Linux" scheme="http://ehlxr.me/categories/Linux/"/>
    
    
      <category term="Linux" scheme="http://ehlxr.me/tags/Linux/"/>
    
      <category term="shell" scheme="http://ehlxr.me/tags/shell/"/>
    
  </entry>
  
  <entry>
    <title>CentOS 安装 Nginx</title>
    <link href="http://ehlxr.me/2016/12/23/CentOS-%E5%AE%89%E8%A3%85-Nginx/"/>
    <id>http://ehlxr.me/2016/12/23/CentOS-安装-Nginx/</id>
    <published>2016-12-23T03:20:44.000Z</published>
    <updated>2016-12-23T03:31:31.074Z</updated>
    
    <content type="html"><![CDATA[<h1 id="一、安装准备"><a href="#一、安装准备" class="headerlink" title="一、安装准备"></a>一、安装准备</h1><p>首先由于 Nginx 的一些模块依赖一些 lib 库，所以在安装 Nginx 之前，必须先安装这些 lib 库，这些依赖库主要有 g++、gcc、openssl-devel、pcre-devel 和 zlib-devel，执行如下命令安装：</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">$ yum install gcc-c++</div><div class="line">$ yum install pcre pcre-devel</div><div class="line">$ yum install zlib zlib-devel</div><div class="line">$ yum install openssl openssl--devel</div></pre></td></tr></table></figure>
<h1 id="二、安装-Nginx"><a href="#二、安装-Nginx" class="headerlink" title="二、安装 Nginx"></a>二、安装 Nginx</h1><p>安装之前，最好检查一下是否已经安装有 Nginx</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ find -name nginx</div></pre></td></tr></table></figure>
<a id="more"></a>
<p>如果系统已经安装了 Nginx，那么就先卸载</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ yum remove nginx</div></pre></td></tr></table></figure>
<p>首先进入 /usr/local 目录</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ <span class="built_in">cd</span> /usr/<span class="built_in">local</span></div></pre></td></tr></table></figure>
<p>从官网下载最新版的 Nginx</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">$ wget http://nginx.org/download/nginx-1.9.6.tar.gz</div><div class="line">$ tar -zxvf nginx-1.9.6.tar.gz</div><div class="line">$ <span class="built_in">cd</span> nginx-1.9.6</div></pre></td></tr></table></figure>
<p>接下来安装，使用 <code>--prefix</code> 参数指定 Nginx 安装的目录</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">$ ./configure  <span class="comment"># 默认安装在 /usr/local/nginx</span></div><div class="line">$ make</div><div class="line">$ make install</div></pre></td></tr></table></figure>
<p>如果没有报错，顺利完成后，最好看一下 nginx 的安装目录</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ whereis nginx</div></pre></td></tr></table></figure>
<p>安装完毕后，进入安装后目录（/usr/local/nginx）便可以启动或停止它了。</p>
<h1 id="二、基本操作命令"><a href="#二、基本操作命令" class="headerlink" title="二、基本操作命令"></a>二、基本操作命令</h1><h2 id="2-1-启动命令"><a href="#2-1-启动命令" class="headerlink" title="2.1 启动命令"></a>2.1 启动命令</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">/usr/<span class="built_in">local</span>/nginx/sbin/nginx -c /usr/<span class="built_in">local</span>/nginx/conf/nginx.conf</div></pre></td></tr></table></figure>
<h2 id="2-2-重启命令"><a href="#2-2-重启命令" class="headerlink" title="2.2 重启命令"></a>2.2 重启命令</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">/usr/<span class="built_in">local</span>/nginx/sbin/nginx -c /usr/<span class="built_in">local</span>/nginx/conf/nginx.conf <span class="_">-s</span> reload</div></pre></td></tr></table></figure>
<h2 id="2-3-停止命令"><a href="#2-3-停止命令" class="headerlink" title="2.3 停止命令"></a>2.3 停止命令</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">/usr/<span class="built_in">local</span>/nginx/sbin/nginx -c /usr/<span class="built_in">local</span>/nginx/conf/nginx.conf  <span class="_">-s</span> stop</div></pre></td></tr></table></figure>
<p><code>-c</code> 制定配置文件的路径，如果不加 Nginx 会自动加载默认路径的配置文件。</p>
]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;一、安装准备&quot;&gt;&lt;a href=&quot;#一、安装准备&quot; class=&quot;headerlink&quot; title=&quot;一、安装准备&quot;&gt;&lt;/a&gt;一、安装准备&lt;/h1&gt;&lt;p&gt;首先由于 Nginx 的一些模块依赖一些 lib 库，所以在安装 Nginx 之前，必须先安装这些 lib 库，这些依赖库主要有 g++、gcc、openssl-devel、pcre-devel 和 zlib-devel，执行如下命令安装：&lt;/p&gt;
&lt;figure class=&quot;highlight bash&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;2&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;3&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;4&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;$ yum install gcc-c++&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;$ yum install pcre pcre-devel&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;$ yum install zlib zlib-devel&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;$ yum install openssl openssl--devel&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h1 id=&quot;二、安装-Nginx&quot;&gt;&lt;a href=&quot;#二、安装-Nginx&quot; class=&quot;headerlink&quot; title=&quot;二、安装 Nginx&quot;&gt;&lt;/a&gt;二、安装 Nginx&lt;/h1&gt;&lt;p&gt;安装之前，最好检查一下是否已经安装有 Nginx&lt;/p&gt;
&lt;figure class=&quot;highlight bash&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;$ find -name nginx&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
    
    </summary>
    
      <category term="Linux" scheme="http://ehlxr.me/categories/Linux/"/>
    
    
      <category term="Linux" scheme="http://ehlxr.me/tags/Linux/"/>
    
      <category term="CentOS" scheme="http://ehlxr.me/tags/CentOS/"/>
    
      <category term="Nginx" scheme="http://ehlxr.me/tags/Nginx/"/>
    
  </entry>
  
  <entry>
    <title>CentOS 安装 rar、zip 解压缩</title>
    <link href="http://ehlxr.me/2016/12/22/CentOS-%E5%AE%89%E8%A3%85-rar%E3%80%81zip-%E8%A7%A3%E5%8E%8B%E7%BC%A9/"/>
    <id>http://ehlxr.me/2016/12/22/CentOS-安装-rar、zip-解压缩/</id>
    <published>2016-12-22T07:39:45.000Z</published>
    <updated>2016-12-26T06:31:45.047Z</updated>
    
    <content type="html"><![CDATA[<p>Windows 系统压缩的 rar 和 zip 文件，在 Linux 系统下是无法通过 tar 命令解压缩的，需要使用 rar 和 zip 命令来解压缩。下面记录一下 rar 和 zip 安装和简单的使用。</p>
<h1 id="一、rar-安装使用"><a href="#一、rar-安装使用" class="headerlink" title="一、rar 安装使用"></a>一、rar 安装使用</h1><p>Linux 系统下使用 rarlinux 解压缩 rar 压缩文件，下载页面：<a href="http://www.rarsoft.com/download.htm。" target="_blank" rel="external">http://www.rarsoft.com/download.htm。</a></p>
<h2 id="1-1-下载系统对应的版本"><a href="#1-1-下载系统对应的版本" class="headerlink" title="1.1 下载系统对应的版本"></a>1.1 下载系统对应的版本</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ wget http://www.rarsoft.com/rar/rarlinux-x64-5.4.0.tar.gz</div></pre></td></tr></table></figure>
<h2 id="1-2-解压、安装"><a href="#1-2-解压、安装" class="headerlink" title="1.2 解压、安装"></a>1.2 解压、安装</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">$ tar -zxvf rarlinux-x64-5.4.0.tar.gz</div><div class="line">$ <span class="built_in">cd</span> rar</div><div class="line">$ make</div></pre></td></tr></table></figure>
<a id="more"></a>
<p>看见下面这些信息就是安装成功了：</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">mkdir -p /usr/<span class="built_in">local</span>/bin</div><div class="line">mkdir -p /usr/<span class="built_in">local</span>/lib</div><div class="line">cp rar unrar /usr/<span class="built_in">local</span>/bin</div><div class="line">cp rarfiles.lst /etc</div><div class="line">cp default.sfx /usr/<span class="built_in">local</span>/lib</div></pre></td></tr></table></figure>
<h2 id="1-3-常用-rar-命令"><a href="#1-3-常用-rar-命令" class="headerlink" title="1.3 常用 rar 命令"></a>1.3 常用 rar 命令</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">$ rar x centos.rar <span class="comment"># 解压 centos.rar 到当前目录</span></div><div class="line">$ rar centos.rar ./piaoyi.org/ <span class="comment"># 将 piaoyi.org 目录打包为 centos.rar</span></div></pre></td></tr></table></figure>
<h2 id="1-4-常见错误原因分析"><a href="#1-4-常见错误原因分析" class="headerlink" title="1.4 常见错误原因分析"></a>1.4 常见错误原因分析</h2><h3 id="1-4-1-如果在运行命令-rar-时-出现下面这个问题"><a href="#1-4-1-如果在运行命令-rar-时-出现下面这个问题" class="headerlink" title="1.4.1 如果在运行命令 rar 时,出现下面这个问题"></a>1.4.1 如果在运行命令 rar 时,出现下面这个问题</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">rar: /lib/i686/nosegneg/libc.so.6: version <span class="string">'GLIBC_2.7'</span> not found (required by rar)</div></pre></td></tr></table></figure>
<p>解决办法：</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ cp rar_static /usr/<span class="built_in">local</span>/bin/rar</div></pre></td></tr></table></figure>
<h3 id="1-4-2-使用-rar-的时候出现错误"><a href="#1-4-2-使用-rar-的时候出现错误" class="headerlink" title="1.4.2 使用 rar 的时候出现错误"></a>1.4.2 使用 rar 的时候出现错误</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">bash: /usr/<span class="built_in">local</span>/bin/rar: /lib/ld-linux.so.2: bad ELF interpreter: No such file or directory</div></pre></td></tr></table></figure>
<p>因为 64 位系统中安装了 32 位程序，解决方法：</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ yum install glibc.i686</div></pre></td></tr></table></figure>
<h3 id="1-4-3-重新安装-glibc-i686-以后还有如下类似错误"><a href="#1-4-3-重新安装-glibc-i686-以后还有如下类似错误" class="headerlink" title="1.4.3 重新安装 glibc.i686 以后还有如下类似错误"></a>1.4.3 重新安装 glibc.i686 以后还有如下类似错误</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">error <span class="keyword">while</span> loading shared libraries: libstdc++.so.6: cannot open shared object file: No such file or directory</div></pre></td></tr></table></figure>
<p>再继续安装包：</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ yum install libstdc++.so.6</div></pre></td></tr></table></figure>
<h1 id="二、zip-unzip-安装使用"><a href="#二、zip-unzip-安装使用" class="headerlink" title="二、zip/unzip 安装使用"></a>二、zip/unzip 安装使用</h1><h2 id="2-1-检查是否有包含-zip（unzip）-的软件包"><a href="#2-1-检查是否有包含-zip（unzip）-的软件包" class="headerlink" title="2.1 检查是否有包含 zip（unzip） 的软件包"></a>2.1 检查是否有包含 zip（unzip） 的软件包</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line">$ yum provides zip</div><div class="line">Loaded plugins: fastestmirror</div><div class="line">Loading mirror speeds from cached hostfile</div><div class="line"> * base: mirrors.cqu.edu.cn</div><div class="line"> * extras: mirrors.cqu.edu.cn</div><div class="line"> * updates: mirrors.tuna.tsinghua.edu.cn</div><div class="line">zip-3.0-11.el7.x86_64 : A file compression and packaging utility compatible with PKZIP</div><div class="line">Repo        : base</div><div class="line"></div><div class="line"></div><div class="line"></div><div class="line">zip-3.0-11.el7.x86_64 : A file compression and packaging utility compatible with PKZIP</div><div class="line">Repo        : @base</div></pre></td></tr></table></figure>
<h2 id="2-2-安装-zip、unzip"><a href="#2-2-安装-zip、unzip" class="headerlink" title="2.2 安装 zip、unzip"></a>2.2 安装 zip、unzip</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">$ yum install zip</div><div class="line">$ yum install unzip</div></pre></td></tr></table></figure>
<h2 id="2-3-常用命令"><a href="#2-3-常用命令" class="headerlink" title="2.3 常用命令"></a>2.3 常用命令</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line">$ zip -r myfile.zip ./*</div><div class="line"><span class="comment"># 将当前目录下的所有文件和文件夹全部压缩成 myfile.zip 文件，-r 表示递归压缩子目录下所有文件.</span></div><div class="line"></div><div class="line">$ unzip -o <span class="_">-d</span> /home/sunny myfile.zip</div><div class="line"><span class="comment"># 把 myfile.zip 文件解压到 /home/sunny/</span></div><div class="line"><span class="comment"># -o ：不提示的情况下覆盖文件</span></div><div class="line"><span class="comment"># -d：将文件解压缩到指定目录下</span></div><div class="line"></div><div class="line">$ zip <span class="_">-d</span> myfile.zip smart.txt</div><div class="line"><span class="comment"># 删除压缩文件中 smart.txt 文件</span></div><div class="line"></div><div class="line">$ zip -m myfile.zip ./rpm_info.txt</div><div class="line"><span class="comment"># 向压缩文件中 myfile.zip 中添加 rpm_info.txt 文件</span></div></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;Windows 系统压缩的 rar 和 zip 文件，在 Linux 系统下是无法通过 tar 命令解压缩的，需要使用 rar 和 zip 命令来解压缩。下面记录一下 rar 和 zip 安装和简单的使用。&lt;/p&gt;
&lt;h1 id=&quot;一、rar-安装使用&quot;&gt;&lt;a href=&quot;#一、rar-安装使用&quot; class=&quot;headerlink&quot; title=&quot;一、rar 安装使用&quot;&gt;&lt;/a&gt;一、rar 安装使用&lt;/h1&gt;&lt;p&gt;Linux 系统下使用 rarlinux 解压缩 rar 压缩文件，下载页面：&lt;a href=&quot;http://www.rarsoft.com/download.htm。&quot;&gt;http://www.rarsoft.com/download.htm。&lt;/a&gt;&lt;/p&gt;
&lt;h2 id=&quot;1-1-下载系统对应的版本&quot;&gt;&lt;a href=&quot;#1-1-下载系统对应的版本&quot; class=&quot;headerlink&quot; title=&quot;1.1 下载系统对应的版本&quot;&gt;&lt;/a&gt;1.1 下载系统对应的版本&lt;/h2&gt;&lt;figure class=&quot;highlight bash&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;$ wget http://www.rarsoft.com/rar/rarlinux-x64-5.4.0.tar.gz&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h2 id=&quot;1-2-解压、安装&quot;&gt;&lt;a href=&quot;#1-2-解压、安装&quot; class=&quot;headerlink&quot; title=&quot;1.2 解压、安装&quot;&gt;&lt;/a&gt;1.2 解压、安装&lt;/h2&gt;&lt;figure class=&quot;highlight bash&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;2&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;3&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;$ tar -zxvf rarlinux-x64-5.4.0.tar.gz&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;$ &lt;span class=&quot;built_in&quot;&gt;cd&lt;/span&gt; rar&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;$ make&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
    
    </summary>
    
      <category term="Linux" scheme="http://ehlxr.me/categories/Linux/"/>
    
    
      <category term="Linux" scheme="http://ehlxr.me/tags/Linux/"/>
    
      <category term="CentOS" scheme="http://ehlxr.me/tags/CentOS/"/>
    
      <category term="rar" scheme="http://ehlxr.me/tags/rar/"/>
    
      <category term="zip" scheme="http://ehlxr.me/tags/zip/"/>
    
  </entry>
  
  <entry>
    <title>Vim Tab 设置为 4 个空格</title>
    <link href="http://ehlxr.me/2016/12/02/Vim-Tab-%E8%AE%BE%E7%BD%AE%E4%B8%BA-4-%E4%B8%AA%E7%A9%BA%E6%A0%BC/"/>
    <id>http://ehlxr.me/2016/12/02/Vim-Tab-设置为-4-个空格/</id>
    <published>2016-12-02T12:46:05.000Z</published>
    <updated>2016-12-02T12:59:12.748Z</updated>
    
    <content type="html"><![CDATA[<p>在 <code>vim</code> 的配置文件中（Liunx：<code>/etc/vimrc</code>）中添加以下代码后，重启 <code>vim</code> 即可实现按 <code>TAB</code> 产生 <code>4</code> 个空格：</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="built_in">set</span> ts=4 <span class="comment"># 注：ts 是 tabstop 的缩写，设 TAB 宽 4 个空格</span></div><div class="line"><span class="built_in">set</span> expandtab</div></pre></td></tr></table></figure>
<p>对于已保存的文件，可以使用下面的方法进行空格和 <code>TAB</code> 的替换：</p>
<p><code>TAB</code> 替换为空格：</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">:<span class="built_in">set</span> ts=4</div><div class="line">:<span class="built_in">set</span> expandtab</div><div class="line">:%retab!</div></pre></td></tr></table></figure>
<a id="more"></a>
<p>空格替换为 <code>TAB</code>：</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">:<span class="built_in">set</span> ts=4</div><div class="line">:<span class="built_in">set</span> noexpandtab</div><div class="line">:%retab!</div></pre></td></tr></table></figure>
<p>加 <code>!</code> 是用于处理非空白字符之后的 <code>TAB</code>，即所有的 <code>TAB</code>，若不加 <code>!</code>，则只处理行首的 <code>TAB</code>。</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;在 &lt;code&gt;vim&lt;/code&gt; 的配置文件中（Liunx：&lt;code&gt;/etc/vimrc&lt;/code&gt;）中添加以下代码后，重启 &lt;code&gt;vim&lt;/code&gt; 即可实现按 &lt;code&gt;TAB&lt;/code&gt; 产生 &lt;code&gt;4&lt;/code&gt; 个空格：&lt;/p&gt;
&lt;figure class=&quot;highlight bash&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;2&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;built_in&quot;&gt;set&lt;/span&gt; ts=4 &lt;span class=&quot;comment&quot;&gt;# 注：ts 是 tabstop 的缩写，设 TAB 宽 4 个空格&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;built_in&quot;&gt;set&lt;/span&gt; expandtab&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;对于已保存的文件，可以使用下面的方法进行空格和 &lt;code&gt;TAB&lt;/code&gt; 的替换：&lt;/p&gt;
&lt;p&gt;&lt;code&gt;TAB&lt;/code&gt; 替换为空格：&lt;/p&gt;
&lt;figure class=&quot;highlight bash&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;2&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;3&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;:&lt;span class=&quot;built_in&quot;&gt;set&lt;/span&gt; ts=4&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;:&lt;span class=&quot;built_in&quot;&gt;set&lt;/span&gt; expandtab&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;:%retab!&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
    
    </summary>
    
      <category term="开发工具" scheme="http://ehlxr.me/categories/%E5%BC%80%E5%8F%91%E5%B7%A5%E5%85%B7/"/>
    
    
      <category term="Vim" scheme="http://ehlxr.me/tags/Vim/"/>
    
  </entry>
  
  <entry>
    <title>忙忙碌碌的十一月份</title>
    <link href="http://ehlxr.me/2016/11/30/%E5%BF%99%E5%BF%99%E7%A2%8C%E7%A2%8C%E7%9A%84%E5%8D%81%E4%B8%80%E6%9C%88%E4%BB%BD/"/>
    <id>http://ehlxr.me/2016/11/30/忙忙碌碌的十一月份/</id>
    <published>2016-11-30T12:04:13.000Z</published>
    <updated>2016-11-30T13:08:26.086Z</updated>
    
    <content type="html"><![CDATA[<p>早就有计划在西安买房，一直觉得还早，主要是没钱，近期有人肯借钱就想看看市场。买房需要做很多准备工作，本想着慢慢先看着，一边从同学朋友那里打听消息，一边从网上看各个楼盘信息，怎奈越看越着急，就想一下子赶紧买了。看中的两个楼盘，价格其实都远远超过自己的预算和目前能承受的能力，不得不说我是一个容易被蛊惑的人，听着置业顾问的天花乱坠的描述，有好几次都差点都掉坑里了。</p>
<p><img src="http://oapjp6spr.bkt.clouddn.com/20161130202110.jpg" alt=""></p>
<a id="more"></a>
<p>不得不吐槽ZF的户口、档案制度，不知道坑了多少人。上大学的时候响应学校的号召，傻乎乎的把户口从老家迁到了学校，现在也没想明白把户口迁过去是为了什么。毕业后二不拉几的嫌麻烦就随大流没有及时把户口、档案迁回去。买房按揭要户口，才意识到这个大坑不尽早填上只会越来越麻烦。为了搞清楚怎样能把户口迁回去，我战战兢兢的打通了相关部门的服务电话号（还好还好，才打了几十次就有人接听了），服务态度和传说中的“为人民服务”一样，果然没让我失望，折腾了整整一天，总算搞明白了大概该怎么弄。还好有同学在，不用自己再去跑一趟，准备好相关的资料邮寄过去就只能祈祷了…</p>
<p>听说十二月份房价要涨，今天最后一天了，中介也“劝告”了我好几次赶紧出手，自己也心动了无数次。十一月份马上结束了，纠结的心该平静了些了，终究还是没有出手…</p>
<hr>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;早就有计划在西安买房，一直觉得还早，主要是没钱，近期有人肯借钱就想看看市场。买房需要做很多准备工作，本想着慢慢先看着，一边从同学朋友那里打听消息，一边从网上看各个楼盘信息，怎奈越看越着急，就想一下子赶紧买了。看中的两个楼盘，价格其实都远远超过自己的预算和目前能承受的能力，不得不说我是一个容易被蛊惑的人，听着置业顾问的天花乱坠的描述，有好几次都差点都掉坑里了。&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://oapjp6spr.bkt.clouddn.com/20161130202110.jpg&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="杂谈" scheme="http://ehlxr.me/categories/%E6%9D%82%E8%B0%88/"/>
    
    
      <category term="杂谈" scheme="http://ehlxr.me/tags/%E6%9D%82%E8%B0%88/"/>
    
  </entry>
  
  <entry>
    <title>[转]Linux 查看系统内核版本和发行版本</title>
    <link href="http://ehlxr.me/2016/11/18/%E8%BD%AC-Linux-%E6%9F%A5%E7%9C%8B%E7%B3%BB%E7%BB%9F%E5%86%85%E6%A0%B8%E7%89%88%E6%9C%AC%E5%92%8C%E5%8F%91%E8%A1%8C%E7%89%88%E6%9C%AC/"/>
    <id>http://ehlxr.me/2016/11/18/转-Linux-查看系统内核版本和发行版本/</id>
    <published>2016-11-18T06:56:43.000Z</published>
    <updated>2016-11-18T07:19:08.258Z</updated>
    
    <content type="html"><![CDATA[<h1 id="一、查看-Linux-内核版本命令"><a href="#一、查看-Linux-内核版本命令" class="headerlink" title="一、查看 Linux 内核版本命令"></a>一、查看 Linux 内核版本命令</h1><p>以下两条命令适合所有 <code>Linux</code> 系统。</p>
<h2 id="1、cat-proc-version"><a href="#1、cat-proc-version" class="headerlink" title="1、cat /proc/version"></a>1、cat /proc/version</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">$ cat /proc/version</div><div class="line">Linux version 3.10.0-327.el7.x86_64 (builder@kbuilder.dev.centos.org) (gcc version 4.8.3 20140911 (Red Hat 4.8.3-9) (GCC) ) <span class="comment">#1 SMP Thu Nov 19 22:10:57 UTC 2015</span></div><div class="line"></div><div class="line">➜  ~ cat /proc/version   </div><div class="line">Linux version 4.4.0-36-generic (buildd@lcy01-01) (gcc version 5.4.0 20160609 (Ubuntu 5.4.0-6ubuntu1~16.04.2) ) <span class="comment">#55-Ubuntu SMP Thu Aug 11 18:01:55 UTC 2016</span></div></pre></td></tr></table></figure>
<h2 id="2、uname-a"><a href="#2、uname-a" class="headerlink" title="2、uname -a"></a>2、uname -a</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">$ uname <span class="_">-a</span></div><div class="line">Linux centos 3.10.0-327.el7.x86_64 <span class="comment">#1 SMP Thu Nov 19 22:10:57 UTC 2015 x86_64 x86_64 x86_64 GNU/Linux</span></div><div class="line"></div><div class="line">➜  ~ uname <span class="_">-a</span></div><div class="line">Linux www 4.4.0-36-generic <span class="comment">#55-Ubuntu SMP Thu Aug 11 18:01:55 UTC 2016 x86_64 x86_64 x86_64 GNU/Linux</span></div></pre></td></tr></table></figure>
<a id="more"></a>
<h1 id="二、查看-Linux-系统版本的命令"><a href="#二、查看-Linux-系统版本的命令" class="headerlink" title="二、查看 Linux 系统版本的命令"></a>二、查看 Linux 系统版本的命令</h1><h2 id="1、lsb-release-a"><a href="#1、lsb-release-a" class="headerlink" title="1、lsb_release -a"></a>1、lsb_release -a</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line">$ lsb_release <span class="_">-a</span></div><div class="line">LSB Version:    :core-4.1-amd64:core-4.1-noarch</div><div class="line">Distributor ID: CentOS</div><div class="line">Description:    CentOS Linux release 7.2.1511 (Core)</div><div class="line">Release:        7.2.1511</div><div class="line">Codename:       Core</div><div class="line"></div><div class="line">➜  ~ lsb_release <span class="_">-a</span></div><div class="line">No LSB modules are available.</div><div class="line">Distributor ID: Ubuntu</div><div class="line">Description:    Ubuntu 16.04.1 LTS</div><div class="line">Release:    16.04</div><div class="line">Codename:   xenial</div></pre></td></tr></table></figure>
<p>这个命令适用于所有的 <code>Linux</code> 发行版，包括 <code>Redhat</code>、<code>SuSE</code>、<code>Debian…</code> 等发行版。</p>
<p>有的系统中默认并没有安装 <code>lsb_release</code>，需要安装。下面介绍一下 <code>CentOS</code> 系统中安装方法。</p>
<p>首先查找 <code>lsb_release</code> 安装包：</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line">$ yum provides lsb_release</div><div class="line">已加载插件：fastestmirror</div><div class="line">Loading mirror speeds from cached hostfile</div><div class="line"> * base: mirrors.btte.net</div><div class="line"> * extras: mirrors.btte.net</div><div class="line"> * updates: mirrors.btte.net</div><div class="line">redhat-lsb-core-4.1-27.el7.centos.1.i686 : LSB Core module support</div><div class="line">源    ：base</div><div class="line">匹配来源：</div><div class="line">文件名    ：/usr/bin/lsb_release</div></pre></td></tr></table></figure>
<p>安装：</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ sudo yum install -y redhat-lsb-core</div></pre></td></tr></table></figure>
<h2 id="2、cat-etc-redhat-release"><a href="#2、cat-etc-redhat-release" class="headerlink" title="2、cat /etc/redhat-release"></a>2、cat /etc/redhat-release</h2><p>这种方法只适合查看 <code>Redhat</code> 系的 <code>Linux</code>，如：<code>CentOS</code>。</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">$ cat /etc/redhat-release</div><div class="line">CentOS Linux release 7.2.1511 (Core)</div></pre></td></tr></table></figure>
<h2 id="3、cat-etc-issue"><a href="#3、cat-etc-issue" class="headerlink" title="3、cat /etc/issue"></a>3、cat /etc/issue</h2><p>此命令适用于所有的 <code>Linux</code> 发行版。</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">➜  ~ cat /etc/issue</div><div class="line">Ubuntu 16.04.1 LTS \n \l</div></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;一、查看-Linux-内核版本命令&quot;&gt;&lt;a href=&quot;#一、查看-Linux-内核版本命令&quot; class=&quot;headerlink&quot; title=&quot;一、查看 Linux 内核版本命令&quot;&gt;&lt;/a&gt;一、查看 Linux 内核版本命令&lt;/h1&gt;&lt;p&gt;以下两条命令适合所有 &lt;code&gt;Linux&lt;/code&gt; 系统。&lt;/p&gt;
&lt;h2 id=&quot;1、cat-proc-version&quot;&gt;&lt;a href=&quot;#1、cat-proc-version&quot; class=&quot;headerlink&quot; title=&quot;1、cat /proc/version&quot;&gt;&lt;/a&gt;1、cat /proc/version&lt;/h2&gt;&lt;figure class=&quot;highlight bash&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;2&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;3&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;4&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;5&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;$ cat /proc/version&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;Linux version 3.10.0-327.el7.x86_64 (builder@kbuilder.dev.centos.org) (gcc version 4.8.3 20140911 (Red Hat 4.8.3-9) (GCC) ) &lt;span class=&quot;comment&quot;&gt;#1 SMP Thu Nov 19 22:10:57 UTC 2015&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;➜  ~ cat /proc/version   &lt;/div&gt;&lt;div class=&quot;line&quot;&gt;Linux version 4.4.0-36-generic (buildd@lcy01-01) (gcc version 5.4.0 20160609 (Ubuntu 5.4.0-6ubuntu1~16.04.2) ) &lt;span class=&quot;comment&quot;&gt;#55-Ubuntu SMP Thu Aug 11 18:01:55 UTC 2016&lt;/span&gt;&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h2 id=&quot;2、uname-a&quot;&gt;&lt;a href=&quot;#2、uname-a&quot; class=&quot;headerlink&quot; title=&quot;2、uname -a&quot;&gt;&lt;/a&gt;2、uname -a&lt;/h2&gt;&lt;figure class=&quot;highlight bash&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;2&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;3&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;4&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;5&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;$ uname &lt;span class=&quot;_&quot;&gt;-a&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;Linux centos 3.10.0-327.el7.x86_64 &lt;span class=&quot;comment&quot;&gt;#1 SMP Thu Nov 19 22:10:57 UTC 2015 x86_64 x86_64 x86_64 GNU/Linux&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;➜  ~ uname &lt;span class=&quot;_&quot;&gt;-a&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;Linux www 4.4.0-36-generic &lt;span class=&quot;comment&quot;&gt;#55-Ubuntu SMP Thu Aug 11 18:01:55 UTC 2016 x86_64 x86_64 x86_64 GNU/Linux&lt;/span&gt;&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
    
    </summary>
    
      <category term="Linux" scheme="http://ehlxr.me/categories/Linux/"/>
    
    
      <category term="Linux" scheme="http://ehlxr.me/tags/Linux/"/>
    
      <category term="Linux版本" scheme="http://ehlxr.me/tags/Linux%E7%89%88%E6%9C%AC/"/>
    
  </entry>
  
  <entry>
    <title>Test daocloud CI</title>
    <link href="http://ehlxr.me/2016/11/18/Test-daocloud-CI/"/>
    <id>http://ehlxr.me/2016/11/18/Test-daocloud-CI/</id>
    <published>2016-11-18T01:44:35.000Z</published>
    <updated>2016-12-06T13:24:21.699Z</updated>
    
    <content type="html"><![CDATA[<p>Test daocloud CI</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;Test daocloud CI&lt;/p&gt;

    
    </summary>
    
      <category term="持续构建" scheme="http://ehlxr.me/categories/%E6%8C%81%E7%BB%AD%E6%9E%84%E5%BB%BA/"/>
    
    
      <category term="持续构建" scheme="http://ehlxr.me/tags/%E6%8C%81%E7%BB%AD%E6%9E%84%E5%BB%BA/"/>
    
  </entry>
  
  <entry>
    <title>[转]Git 版本回滚</title>
    <link href="http://ehlxr.me/2016/11/07/%E8%BD%AC-Git-%E7%89%88%E6%9C%AC%E5%9B%9E%E6%BB%9A/"/>
    <id>http://ehlxr.me/2016/11/07/转-Git-版本回滚/</id>
    <published>2016-11-07T08:53:38.000Z</published>
    <updated>2016-12-14T09:50:43.365Z</updated>
    
    <content type="html"><![CDATA[<blockquote>
<p>总有一天你会遇到下面的问题：</p>
<ul>
<li>改完代码匆忙提交，上线发现有问题，怎么办？赶紧回滚。</li>
<li>改完代码测试也没有问题，但是上线发现你的修改影响了之前运行正常的代码报错，必须回滚。</li>
</ul>
</blockquote>
<p>这些开发中很常见的问题，所以 <code>git</code> 的取消提交，回退甚至返回上一版本都是特别重要的。大致分为下面 <code>2</code> 种情况：</p>
<h1 id="一、没有-push"><a href="#一、没有-push" class="headerlink" title="一、没有 push"></a>一、没有 push</h1><p>这种情况发生在你的本地代码仓库，可能你 <code>add</code>，<code>commit</code> 以后发现代码有点问题，准备取消提交，用到下面命令回退到某个版本：</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">git reset [--soft | --mixed | --hard]</div></pre></td></tr></table></figure>
<a id="more"></a>
<p>上面常见三种类型</p>
<h2 id="mixed"><a href="#mixed" class="headerlink" title="mixed"></a>mixed</h2><p>会保留源码，只是将 <code>git commit</code> 和 <code>index</code> 信息回退到了某个版本。</p>
<figure class="highlight sql"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">git <span class="keyword">reset</span> 默认是 <span class="comment">--mixed 模式 </span></div><div class="line">git <span class="keyword">reset</span> <span class="comment">--mixed  等价于  git reset</span></div></pre></td></tr></table></figure>
<h2 id="soft"><a href="#soft" class="headerlink" title="soft"></a>soft</h2><p>保留源码，只回退到 <code>commit</code> 信息到某个版本。不涉及 <code>index</code> 的回退，如果还需要提交，直接 <code>commit</code> 即可。</p>
<h2 id="hard"><a href="#hard" class="headerlink" title="hard"></a>hard</h2><p>源码也会回退到某个版本，<code>commit</code> 和 <code>index</code> 都回回退到某个版本。（<strong>注意，这种方式是改变本地代码仓库源码</strong>）</p>
<h1 id="二、已经-push"><a href="#二、已经-push" class="headerlink" title="二、已经 push"></a>二、已经 push</h1><h2 id="2-1-方法一"><a href="#2-1-方法一" class="headerlink" title="2.1 方法一"></a>2.1 方法一</h2><p>使用 <code>git reset --hard &lt;commit...&gt;</code> 回退本地代码到某个版本。</p>
<p>使用 <code>git push --force</code> 将本次变更强行推送至服务器（因为你线上的代码没有变，线上 <code>commit</code>，<code>index</code> 都没有变，所以必须使用强制推送）。这样在服务器上的最后一次错误提交也彻底消失了。</p>
<p><strong>注意：</strong>这样操作比较比较危险，例如：在你的 <code>commit</code> 之后别人又提交了新的 <code>commit</code>，那在你强制推送之后，那位仁兄的 <code>commit</code> 也跟着一起消失了，所以不建议这样操作。</p>
<h2 id="2-2-方法二"><a href="#2-2-方法二" class="headerlink" title="2.2 方法二"></a>2.2 方法二</h2><p>使用以下命令：</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">git revert &lt;commit-ish&gt;...</div></pre></td></tr></table></figure>
<p><code>git revert</code> 用于反转提交，用一个新提交来撤销某次提交，执行 <code>revert</code> 命令时要求工作树必须是干净的。</p>
<p><code>revert</code> 之后你再 <code>git push</code> 既可以把线上的代码更新。（这里不会像 <code>reset</code> 造成冲突的问题）</p>
<p><code>revert</code> 使用需要先找到你想回滚版本唯一的 <code>commit</code> 标识代码，可以用 <code>git log</code> 或者在 <code>adgit</code> 搭建的 <code>web</code> 环境历史提交记录里查看。</p>
<figure class="highlight armasm"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="symbol">git</span> <span class="keyword">revert </span>c011eb3c20ba6fb38cc94fe5a8dda366a3990c61</div></pre></td></tr></table></figure>
<p>通常，前几位即可：</p>
<figure class="highlight armasm"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="symbol">git</span> <span class="keyword">revert </span>c011eb3</div></pre></td></tr></table></figure>
<h1 id="三、revert-与-reset-比较"><a href="#三、revert-与-reset-比较" class="headerlink" title="三、revert 与 reset 比较"></a>三、revert 与 reset 比较</h1><p><code>git revert</code> 是用一次新的 <code>commit</code> 来回滚之前的 <code>commit</code>，<code>git reset</code> 是直接删除指定的 <code>commit</code>。</p>
<p>看似达到的效果是一样的，其实完全不同。</p>
<p>3.1 上面我们说的如果你已经 <code>push</code> 到线上代码库， <code>reset</code> 删除指定 <code>commit</code> 以后，你 <code>git push</code> 可能导致一大堆冲突。但是 <code>revert</code> 并不会。</p>
<p>3.2 如果在日后现有分支和历史分支需要合并的时候，<code>reset</code> 恢复部分的代码依然会出现在历史分支里。但是 <code>revert</code> 方向提交的 <code>commit</code> 并不会出现在历史分支里。</p>
<p>3.3 <code>reset</code> 是在正常的 <code>commit</code> 历史中，删除了指定的 <code>commit</code>，这时 <code>HEAD</code> 是向后移动了，而 <code>revert</code> 是在正常的 <code>commit</code> 历史中再 <code>commit</code> 一次，只不过是反向提交，他的 <code>HEAD</code> 是一直向前的。</p>
<hr>
<p><a href="http://yijiebuyi.com/blog/8f985d539566d0bf3b804df6be4e0c90.html" target="_blank" rel="external">参考文章地址</a></p>
]]></content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt;总有一天你会遇到下面的问题：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;改完代码匆忙提交，上线发现有问题，怎么办？赶紧回滚。&lt;/li&gt;
&lt;li&gt;改完代码测试也没有问题，但是上线发现你的修改影响了之前运行正常的代码报错，必须回滚。&lt;/li&gt;
&lt;/ul&gt;
&lt;/blockquote&gt;
&lt;p&gt;这些开发中很常见的问题，所以 &lt;code&gt;git&lt;/code&gt; 的取消提交，回退甚至返回上一版本都是特别重要的。大致分为下面 &lt;code&gt;2&lt;/code&gt; 种情况：&lt;/p&gt;
&lt;h1 id=&quot;一、没有-push&quot;&gt;&lt;a href=&quot;#一、没有-push&quot; class=&quot;headerlink&quot; title=&quot;一、没有 push&quot;&gt;&lt;/a&gt;一、没有 push&lt;/h1&gt;&lt;p&gt;这种情况发生在你的本地代码仓库，可能你 &lt;code&gt;add&lt;/code&gt;，&lt;code&gt;commit&lt;/code&gt; 以后发现代码有点问题，准备取消提交，用到下面命令回退到某个版本：&lt;/p&gt;
&lt;figure class=&quot;highlight bash&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;git reset [--soft | --mixed | --hard]&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
    
    </summary>
    
      <category term="Git" scheme="http://ehlxr.me/categories/Git/"/>
    
    
      <category term="Git" scheme="http://ehlxr.me/tags/Git/"/>
    
  </entry>
  
  <entry>
    <title>Docker 学习笔记</title>
    <link href="http://ehlxr.me/2016/11/03/Docker-%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"/>
    <id>http://ehlxr.me/2016/11/03/Docker-学习笔记/</id>
    <published>2016-11-03T07:46:19.000Z</published>
    <updated>2017-01-03T02:57:19.134Z</updated>
    
    <content type="html"><![CDATA[<p><img src="http://oapjp6spr.bkt.clouddn.com/20161103001.png" alt="Docker"></p>
<h1 id="一、安装"><a href="#一、安装" class="headerlink" title="一、安装"></a>一、安装</h1><h2 id="1-1-Ubuntu-系统"><a href="#1-1-Ubuntu-系统" class="headerlink" title="1.1 Ubuntu 系统"></a>1.1 Ubuntu 系统</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">sudo apt-get install docker.io</div></pre></td></tr></table></figure>
<h2 id="1-2-CentOS-系统"><a href="#1-2-CentOS-系统" class="headerlink" title="1.2 CentOS 系统"></a>1.2 CentOS 系统</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">sudo yum install docker</div></pre></td></tr></table></figure>
<a id="more"></a>
<h1 id="二、基本概念"><a href="#二、基本概念" class="headerlink" title="二、基本概念"></a>二、基本概念</h1><h2 id="2-1-Docker-images"><a href="#2-1-Docker-images" class="headerlink" title="2.1 Docker images"></a>2.1 Docker images</h2><p>Docker image 是一个只读类型的模板。比如一个镜像可以是一个包含 apache 和你的 web 应用的 ubuntu 操作系统。我们经常使用镜像来创建容器。Docker 提供了一种快捷的方式来构建新镜像或者更新镜像，同时你也可以下载其他人已经创建好的镜像。Docker image 是 Docker 结构中的构建组件。</p>
<h2 id="2-2-Docker-Registries"><a href="#2-2-Docker-Registries" class="headerlink" title="2.2 Docker Registries"></a>2.2 Docker Registries</h2><p>Docker registries 用来保存镜像。它分为公开仓库和私有仓库，你可以从仓库中上传或者下载镜像。公开的 Docker 仓库称之为 <a href="https://hub.docker.com/" target="_blank" rel="external">Docker Hub</a>。它提供了你可以使用的非常多的镜像。你可以自由的创建镜像或者使用这里面其他人已经创建好的镜像。Docker registries 属于 Docker 中的分发组件。</p>
<h2 id="2-3-Docker-containers"><a href="#2-3-Docker-containers" class="headerlink" title="2.3 Docker containers"></a>2.3 Docker containers</h2><p>Docker containers 同目录有几分相似。Docker containers 保存了执行应用所需的所有资源。每一个 Docker containers 都是由 image 创建的。Docker containers 可以 run, start, stop, restart, rm。需要注意的是，Docker containers 之间是隔离的。Docker containers 属于 Docker 中的执行组件。</p>
<h1 id="三、常用命令"><a href="#三、常用命令" class="headerlink" title="三、常用命令"></a>三、常用命令</h1><h2 id="3-1-镜像操作"><a href="#3-1-镜像操作" class="headerlink" title="3.1 镜像操作"></a>3.1 镜像操作</h2><ul>
<li>拉取镜像：<code>docker pull nginx:latest</code></li>
<li>查看容器列表：<code>docker images</code></li>
<li>删除容器：<code>docker rmi &lt;image id&gt;</code></li>
<li>想要删除 untagged images（也就是那些 id 为 <none> 的容器）：<code>docker rmi $(docker images | grep &quot;^&lt;none&gt;&quot; | awk &quot;{print $3}&quot;)</code></none></li>
<li>删除全部容器：<code>docker rmi $(docker images -q)</code></li>
</ul>
<h2 id="3-2-创建容器"><a href="#3-2-创建容器" class="headerlink" title="3.2 创建容器"></a>3.2 创建容器</h2><p>创建一个容器并运行，例如：</p>
<figure class="highlight stylus"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">docker run --name blog --privileged=true -v /home/Hexo/public:/usr/share/nginx/<span class="selector-tag">html</span>:ro -d -<span class="selector-tag">p</span> <span class="number">80</span>:<span class="number">80</span> docker.io/nginx</div></pre></td></tr></table></figure>
<ul>
<li><code>--name</code>：容器名称</li>
<li><code>--privileged=true</code>：设置权限</li>
<li><code>-v</code>：挂载本地磁盘目录，格式为本地磁盘绝对路径:容器路径<blockquote>
<p>保证删除容器后，数据不被删除</p>
</blockquote>
</li>
<li><code>:ro</code>：只读</li>
<li><code>-d</code>：后台模式</li>
<li><code>i</code>：交互式操作</li>
<li><code>t</code>：终端</li>
<li><code>-p</code>：设置宿主计算机和容器端口映射</li>
</ul>
<blockquote>
<p>在Dockerfile 中有一条指令是 EXPOSE 22，如果使用 <code>-P</code>，宿主机会随机选择一个 <code>没有被使用的端口</code> 和 docker <code>容器的 22 端口</code> 做 <code>端口映射</code>，如果 docker 主机或者容器重启后，宿主机又会随机选择一个没有被使用的端口和 docker 容器的 22 端口做端口映射，这样端口会发生 <code>变化</code></p>
<p>如果使用 <code>-p</code>，比如 <code>2222:22</code>，这样不管是 docker 主机或者容器重启后，2222:22 端口都是这样来映射，<code>不会发生改变</code></p>
</blockquote>
<h2 id="3-3-容器操作"><a href="#3-3-容器操作" class="headerlink" title="3.3 容器操作"></a>3.3 容器操作</h2><ul>
<li>启动：<code>docker start blog</code></li>
<li>停止：<code>docker stop blog</code>；停止所有容器：<code>docker stop $(docker ps -a -q)</code></li>
<li>删除：<code>docker rm blog</code>；删除所有容器：<code>docker rm $(docker ps -a -q)</code></li>
<li>查看：<code>docker ps -a</code>（查看所有容器，包括已启动的和未启动的）</li>
</ul>
<h2 id="3-3-进入容器"><a href="#3-3-进入容器" class="headerlink" title="3.3 进入容器"></a>3.3 进入容器</h2><figure class="highlight mel"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">sudo docker <span class="keyword">exec</span> -it blog /bin/bash</div></pre></td></tr></table></figure>
<h1 id="四、Docker-私有仓库"><a href="#四、Docker-私有仓库" class="headerlink" title="四、Docker 私有仓库"></a>四、Docker 私有仓库</h1><p>Docker 提供了一个中央仓库，同时也允许我们使用 registry 搭建本地私有仓库。</p>
<h2 id="4-1-搭建-Docker-私有仓库"><a href="#4-1-搭建-Docker-私有仓库" class="headerlink" title="4.1 搭建 Docker 私有仓库"></a>4.1 搭建 Docker 私有仓库</h2><p>首先拉取 registry 镜像</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">docker pull registry</div></pre></td></tr></table></figure>
<p>创建 register 容器并运行</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">docker run --name registry <span class="_">-d</span> -p 5000:5000 --privileged=<span class="literal">true</span> -v /opt/registry:/var/lib/registry/ registry</div></pre></td></tr></table></figure>
<p>挂载容器中存放镜像的目录到本地 <code>/opt/registry</code>，需要注意的一点是，容器中存放镜像的目录 registry 官方镜像示例中使用的是 <code>/tmp/registry-dev</code> ，但实验证明在版本 <code>2.5.0</code> 中，目录是 <code>/var/lib/registry/</code>。</p>
<p>CentOS 系统挂载目录需要加上 <code>--privileged=true</code> 解决挂载的目录没有权限的问题。</p>
<p>打开浏览器输入 register 容器宿主计算机地址加端口（如：<a href="http://192.168.237.128:5000/v2/" target="_blank" rel="external">http://192.168.237.128:5000/v2/</a> ），如果出现 <code>{}</code>，即表明 register 容器运行成功。</p>
<h2 id="4-2-测试使用私有仓库"><a href="#4-2-测试使用私有仓库" class="headerlink" title="4.2 测试使用私有仓库"></a>4.2 测试使用私有仓库</h2><p>首先给需要 push 到仓库的 images 打 TAG，前面需要带上私有仓库的地址。</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ docker tag docker.io/registry:latest 192.168.237.128:5000/registry:2.5.0</div></pre></td></tr></table></figure>
<p>push 到私有仓库</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ docker push 192.168.237.128:5000/registry:2.5.0</div></pre></td></tr></table></figure>
<p>通过以下命令删除镜像 <code>192.168.237.128:5000/registry:2.5.0</code>：</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ docker rmi 192.168.237.128:5000/registry:2.5.0</div></pre></td></tr></table></figure>
<p>然后通过以下命令即可拉取私有仓库的镜像：</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ docker pull 192.168.237.128:5000/hexo:latest</div></pre></td></tr></table></figure>
<p>如果 docker push 的时候出现以下错误信息：</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">$ docker push 192.168.237.128:5000/registry:2.5.0</div><div class="line">The push refers to a repository [192.168.237.128:5000/registry]</div><div class="line">unable to ping registry endpoint https://192.168.237.128:5000/v0/</div><div class="line">v2 ping attempt failed with error: Get https://192.168.237.128:5000/v2/: http: server gave HTTP response to HTTPS client</div><div class="line"> v1 ping attempt failed with error: Get https://192.168.237.128:5000/v1/_ping: http: server gave HTTP response to HTTPS client</div></pre></td></tr></table></figure>
<p>修改文件 <code>/etc/sysconfig/docker</code> 添加以下代码，然后重启 docker 服务即可重新 push。</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">ADD_REGISTRY=<span class="string">'--add-registry 192.168.237.128:5000'</span></div><div class="line"></div><div class="line">INSECURE_REGISTRY=<span class="string">'--insecure-registry 192.168.237.128:5000'</span></div></pre></td></tr></table></figure>
<h1 id="五、Dockerfile"><a href="#五、Dockerfile" class="headerlink" title="五、Dockerfile"></a>五、Dockerfile</h1><h2 id="5-1-什么是Dockerfile？"><a href="#5-1-什么是Dockerfile？" class="headerlink" title="5.1 什么是Dockerfile？"></a>5.1 什么是Dockerfile？</h2><blockquote>
<p>Dockerfile 是自动构建 docker 镜像的配置文件，Dockerfile 中的命令非常类似 linux shell 下的命令<br>Dockerfile，可以让用户自定义构建 docker 镜像，支持以 # 开头的注释行</p>
</blockquote>
<p>一般，Dockerfile分为4部分</p>
<ul>
<li>基础镜像（父镜像）信息</li>
<li>维护者信息</li>
<li>镜像操作命令</li>
<li>容器启动命令</li>
</ul>
<h2 id="5-2-Dockerfile-介绍"><a href="#5-2-Dockerfile-介绍" class="headerlink" title="5.2 Dockerfile 介绍"></a>5.2 Dockerfile 介绍</h2><p><code>FROM       centos:centos7.1.1503</code></p>
<blockquote>
<p>基于 <strong>父镜像</strong> 构建其他 docker 镜像，<em>父镜像</em>：可以通过 docker pull 命令获得，也可以自己制作</p>
</blockquote>
<p><code>MAINTAINER Carson,C.J.Zeong &lt;zcy@nicescale.com&gt;</code></p>
<blockquote>
<p>Dockerfile 维护者</p>
</blockquote>
<p><code>ENV TZ &quot;Asia/Shanghai&quot;</code></p>
<blockquote>
<p>ENV（environment）设置环境变量，一个 Dockerfile 中可以写多个。以上例子是：设置 docker 容器的时区为 Shanghai</p>
</blockquote>
<p><strong>Dockerfile 中有 2 条指令可以拷贝文件</strong></p>
<p><code>ADD aliyun-mirror.repo /etc/yum.repos.d/CentOS-Base.repo</code></p>
<blockquote>
<p>拷贝本地文件到 docker 容器里，还可以拷贝 URL 链接地址下的文件，ADD 还具有解压软件包的功能（支持 gzip, bzip2 or xz）</p>
</blockquote>
<p><code>COPY test /mydir</code></p>
<blockquote>
<p>拷贝本地文件到 docker 容器</p>
</blockquote>
<p><code>RUN yum install -y curl wget....</code></p>
<blockquote>
<p>RUN 命令，非常类似 Linux 下的 shell 命令 <code>(the command is run in a shell - /bin/sh -c - shell form)</code><br>在 Dockerfile 中每执行一条指令（ENV、ADD、RUN等命令），都会生成一个 docker image layer</p>
</blockquote>
<p><code>ADD supervisord.conf /etc/supervisord.conf</code></p>
<blockquote>
<p>添加 supervisor 的主配置文件，到 docker 容器里</p>
</blockquote>
<p><code>EXPOSE 22</code></p>
<blockquote>
<p>端口映射 <code>EXPOSE &lt;host_port&gt;:&lt;container_port&gt;</code><br>推荐使用 <code>docker run -p &lt;host_port&gt;:&lt;container_port&gt;</code> 来固化端口</p>
</blockquote>
<p><code>ENTRYPOINT [&quot;/usr/bin/supervisord&quot;, &quot;-n&quot;, &quot;-c&quot;, &quot;/etc/supervisord.conf&quot;]</code></p>
<blockquote>
<p>一个 Dockerfile 中只有最后一条 <code>ENTRYPOINT</code> 生效，并且每次启动 docker 容器，都会执行 <code>ENTRYPOINT</code></p>
</blockquote>
<p><code>ONBUILD ADD . /app</code></p>
<blockquote>
<p><code>ONBUILD</code> 在生成当前docker镜像的时候不生效，在子镜像生效；<code>ONBUILD</code>在产品发布时起着非常重要的作用！举例<br>A镜像中有<code>ONBUILD</code>指令，在构建A镜像时<code>ONBUILD</code>指令不执行；B镜像<code>FROM A</code>,在构建B镜像时<code>ONBUILD</code>指令开始执行；</p>
</blockquote>
<p><code>VOLUME [&quot;/var/lib/mysql&quot;]</code></p>
<blockquote>
<p>指定 docker 容器和宿主机做映射的文件目录</p>
</blockquote>
<h2 id="5-3-生成-docker-镜像"><a href="#5-3-生成-docker-镜像" class="headerlink" title="5.3 生成 docker 镜像"></a>5.3 生成 docker 镜像</h2><p>以上文件就是用来生成第一个 docker 镜像的 Dockerfile，通过 <code>docker build</code> 指令来生成 docker 镜像</p>
<p><code>docker build -t csphere/centos:7.1 .</code></p>
<blockquote>
<p>如果 Dockerfile 在当前目录下，输入点 <code>.</code> 就可以进行加载当前目录下的 <code>Dockerfile</code><br>如果不在当前目录下需要运行 <code>docker build -t csphere/centos:7.1 &lt;Dockerfile_dir&gt;</code> 加载相对路径下的 <code>Dockerfile</code></p>
</blockquote>
<p>docker 镜像的命名规则 <code>registry_url/namespace/image_name:tag</code> 默认 <code>tag</code> 是 <code>latest</code></p>
<blockquote>
<p>在构建 Docker 镜像时，如果有自己内部的 yum 源，替换成自己内部的 yum 地址，可以加快构建速度。<br>如果第一次构建失败，会有部分镜像 layer 生成，第二次构建会基于第一次构建所生成的 layer（use cache），继续构建</p>
</blockquote>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line">Step 10 : EXPOSE 22</div><div class="line"> ---&gt; Running <span class="keyword">in</span> 0ed1c5479ebc</div><div class="line"> ---&gt; c57a5bac41c8</div><div class="line">Removing intermediate container 0ed1c5479ebc</div><div class="line">Step 11 : ENTRYPOINT /usr/bin/supervisord -n -c /etc/supervisord.conf</div><div class="line"> ---&gt; Running <span class="keyword">in</span> e16c7ac2fd45</div><div class="line"> ---&gt; 185ef7b101a8</div><div class="line">Removing intermediate container e16c7ac2fd45</div><div class="line">Successfully built 185ef7b101a8</div></pre></td></tr></table></figure>
<p>可以看到每执行一条 <code>Dockerfile</code> 的指令都会生成一个镜像的 layer <code>c57a5bac41c8</code> <code>185ef7b101a8</code> 最后 <code>185ef7b101a8</code> 这个是 docker 镜像的ID，<code>185ef7b101a8</code> 是由 <code>c57a5bac41c8</code> <code>185ef7b101a8</code>…layers 叠加而成，体现了 docker 镜像是分层的</p>
<hr>
<div style="color: #f00;">未完待续…</div>

]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;img src=&quot;http://oapjp6spr.bkt.clouddn.com/20161103001.png&quot; alt=&quot;Docker&quot;&gt;&lt;/p&gt;
&lt;h1 id=&quot;一、安装&quot;&gt;&lt;a href=&quot;#一、安装&quot; class=&quot;headerlink&quot; title=&quot;一、安装&quot;&gt;&lt;/a&gt;一、安装&lt;/h1&gt;&lt;h2 id=&quot;1-1-Ubuntu-系统&quot;&gt;&lt;a href=&quot;#1-1-Ubuntu-系统&quot; class=&quot;headerlink&quot; title=&quot;1.1 Ubuntu 系统&quot;&gt;&lt;/a&gt;1.1 Ubuntu 系统&lt;/h2&gt;&lt;figure class=&quot;highlight bash&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;sudo apt-get install docker.io&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h2 id=&quot;1-2-CentOS-系统&quot;&gt;&lt;a href=&quot;#1-2-CentOS-系统&quot; class=&quot;headerlink&quot; title=&quot;1.2 CentOS 系统&quot;&gt;&lt;/a&gt;1.2 CentOS 系统&lt;/h2&gt;&lt;figure class=&quot;highlight bash&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;sudo yum install docker&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
    
    </summary>
    
      <category term="Docker" scheme="http://ehlxr.me/categories/Docker/"/>
    
    
      <category term="Docker" scheme="http://ehlxr.me/tags/Docker/"/>
    
  </entry>
  
  <entry>
    <title>测试使用 daocloud 持续构建 Hexo</title>
    <link href="http://ehlxr.me/2016/11/02/%E6%B5%8B%E8%AF%95%E4%BD%BF%E7%94%A8-daocloud-%E6%8C%81%E7%BB%AD%E6%9E%84%E5%BB%BA-Hexo/"/>
    <id>http://ehlxr.me/2016/11/02/测试使用-daocloud-持续构建-Hexo/</id>
    <published>2016-11-02T11:03:06.000Z</published>
    <updated>2016-12-07T05:25:19.614Z</updated>
    
    <content type="html"><![CDATA[<h1 id="测试使用-daocloud-持续构建-Hexo"><a href="#测试使用-daocloud-持续构建-Hexo" class="headerlink" title="测试使用 daocloud 持续构建 Hexo"></a>测试使用 daocloud 持续构建 Hexo</h1><div class="note danger"><p>Coding Hexo DaoCloud </p>
</div>
<div class="note primary"><p>看到这边博文，表示持续构建成功！！！ </p>
</div>
]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;测试使用-daocloud-持续构建-Hexo&quot;&gt;&lt;a href=&quot;#测试使用-daocloud-持续构建-Hexo&quot; class=&quot;headerlink&quot; title=&quot;测试使用 daocloud 持续构建 Hexo&quot;&gt;&lt;/a&gt;测试使用 daocloud 持续构
    
    </summary>
    
      <category term="持续构建" scheme="http://ehlxr.me/categories/%E6%8C%81%E7%BB%AD%E6%9E%84%E5%BB%BA/"/>
    
    
      <category term="持续构建" scheme="http://ehlxr.me/tags/%E6%8C%81%E7%BB%AD%E6%9E%84%E5%BB%BA/"/>
    
      <category term="Daocloud" scheme="http://ehlxr.me/tags/Daocloud/"/>
    
  </entry>
  
  <entry>
    <title>测试 Travis CI 结合 Hexo 使用</title>
    <link href="http://ehlxr.me/2016/11/02/%E6%B5%8B%E8%AF%95-Travis-CI-%E7%BB%93%E5%90%88-Hexo-%E4%BD%BF%E7%94%A8/"/>
    <id>http://ehlxr.me/2016/11/02/测试-Travis-CI-结合-Hexo-使用/</id>
    <published>2016-11-02T09:32:35.000Z</published>
    <updated>2016-11-03T12:35:22.612Z</updated>
    
    <content type="html"><![CDATA[<h1 id="测试-Travis-CI-结合-Hexo-使用"><a href="#测试-Travis-CI-结合-Hexo-使用" class="headerlink" title="测试 Travis CI 结合 Hexo 使用"></a>测试 Travis CI 结合 Hexo 使用</h1>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;测试-Travis-CI-结合-Hexo-使用&quot;&gt;&lt;a href=&quot;#测试-Travis-CI-结合-Hexo-使用&quot; class=&quot;headerlink&quot; title=&quot;测试 Travis CI 结合 Hexo 使用&quot;&gt;&lt;/a&gt;测试 Travis CI 结合 H
    
    </summary>
    
      <category term="持续构建" scheme="http://ehlxr.me/categories/%E6%8C%81%E7%BB%AD%E6%9E%84%E5%BB%BA/"/>
    
    
      <category term="持续构建" scheme="http://ehlxr.me/tags/%E6%8C%81%E7%BB%AD%E6%9E%84%E5%BB%BA/"/>
    
      <category term="Travis CI" scheme="http://ehlxr.me/tags/Travis-CI/"/>
    
  </entry>
  
  <entry>
    <title>热爱微小的改变</title>
    <link href="http://ehlxr.me/2016/10/31/%E7%83%AD%E7%88%B1%E5%BE%AE%E5%B0%8F%E7%9A%84%E6%94%B9%E5%8F%98/"/>
    <id>http://ehlxr.me/2016/10/31/热爱微小的改变/</id>
    <published>2016-10-31T09:05:37.000Z</published>
    <updated>2016-11-01T09:31:10.230Z</updated>
    
    <content type="html"><![CDATA[<p><img src="http://oapjp6spr.bkt.clouddn.com/20161031001.jpg" alt=""><br>当你有着强烈的情绪时，可能是因为你要明哲保身。你不愿冒险因为你害怕被拒绝、害怕失败、害怕自己hold不住。真的，试想下如果你彻底的失败了，甚至在完全陌生的人面前流泪你会怎么做？也许你不相信你会采取合理的风险。也许你曾经打破常规去挑战自我的极限，但是结果却并不令你满意。但卖掉你所有的财产，搬去墨西哥并非我今天所谈论的改变类型。</p>
<a id="more"></a>
<p>也许你会害怕改变，虽然你也不知道其中的原因。一想到沉溺于同样的地方遇见同样的人，遵循例行的生活是一种最不愉快的体验。</p>
<p>的确如此，你每天在同一时间起床之后重复同样的行为。你吃着一成不变的食物去同一家电影院。你约会同样的朋友甚至在每周同一时间。很多情况下常规和结构化的模式有助于情绪管理。虽然可预测性是你行为方式的一部分，但如果这部分所占比例太高，则会挤压你生活中的乐趣。</p>
<p>探索新体验是增加幸福感的方式之一。新体验并不需要太大的改变。或许你可以探索下你所在城市的自己不熟悉的地方，品尝些新食物，做一道新菜，阅读一些你平时并非爱好的杂志，或者去参加一些你从未体验过的活动。你也可以走进一家专卖亚洲食品的商店，或者到公园里参加一些游戏活动。新体验能够培养兴趣或者参与甚至取代你之前熟知的意识。当在熟知的范围内发生适当的改变，会刺激你的活力和幸福感。你看孩子们始终拥有对世界的好奇心和迷恋感，因为对于他们来说什么都是新的。所以当你寻求新体验的时候你也能保持一份好奇感。</p>
<p>当你想做一些全新的不同的事情时候，通常会面临已有的惯性思维。你给自己各种借口待在房子里，重复自己昨天甚至前天同样的事情。你告诉自己学习新东西太麻烦了，或者你根本就不喜欢轮滑，那么还为什么要熬夜到很晚，甚至失去自己呼呼大睡的机会呢？这种消极的心理暗示总是非常具有说服力，你会认为你年纪太大没必要再去学习骑骆驼，或者如果你已经在博物馆工作那么你可能接下来的一辈子都会留在这里。</p>
<p>从事新活动是你可以学习的行为。给自己创造一些新体验。如果有朋友愿意和你一起，这将是非常有帮助的。刚开始你可能会觉得不舒服但是一定要坚持下去。直到在这个水平内你感到习惯然后再继续往下走。把你想做的事情列一个清单，保证一周一次并坚持四个月。有时你会厌烦这很正常，所以一定要坚持下去。培养兴趣和保持活力是非常值得做的事情。</p>
<p>译者：小太阳123<br>作者：KARYN HALL,PHD</p>
<hr>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;img src=&quot;http://oapjp6spr.bkt.clouddn.com/20161031001.jpg&quot; alt=&quot;&quot;&gt;&lt;br&gt;当你有着强烈的情绪时，可能是因为你要明哲保身。你不愿冒险因为你害怕被拒绝、害怕失败、害怕自己hold不住。真的，试想下如果你彻底的失败了，甚至在完全陌生的人面前流泪你会怎么做？也许你不相信你会采取合理的风险。也许你曾经打破常规去挑战自我的极限，但是结果却并不令你满意。但卖掉你所有的财产，搬去墨西哥并非我今天所谈论的改变类型。&lt;/p&gt;
    
    </summary>
    
      <category term="杂谈" scheme="http://ehlxr.me/categories/%E6%9D%82%E8%B0%88/"/>
    
    
      <category term="杂谈" scheme="http://ehlxr.me/tags/%E6%9D%82%E8%B0%88/"/>
    
  </entry>
  
  <entry>
    <title>看懂的人都还在加班中...</title>
    <link href="http://ehlxr.me/2016/10/27/%E7%9C%8B%E6%87%82%E7%9A%84%E4%BA%BA%E9%83%BD%E8%BF%98%E5%9C%A8%E5%8A%A0%E7%8F%AD%E4%B8%AD/"/>
    <id>http://ehlxr.me/2016/10/27/看懂的人都还在加班中/</id>
    <published>2016-10-27T07:06:38.000Z</published>
    <updated>2016-11-01T09:31:10.231Z</updated>
    
    <content type="html"><![CDATA[<blockquote>
<p>以下是关于程序员的一些笑话，据说看懂的人都还在加班中。</p>
</blockquote>
<p>0、老婆给当程序员的老公打电话：下班顺路买十个包子，如果看到卖西瓜的，买一个。当晚老公手捧一个包子进了家门。老婆怒道：你怎么只买一个包子？！老公甚恐，喃喃道：因为我真看到卖西瓜的了。</p>
<p>1、一程序员去面试，面试官问：“你毕业才两年，这三年工作经验是怎么来的？！”程序员答：“加班。”</p>
<p>2、某程序员对书法十分感兴趣，退休后决定在这方面有所建树。于是花重金购买了上等的文房四宝。一日，饭后突生雅兴，一番磨墨拟纸，并点上了上好的檀香，颇有王羲之风范，又具颜真卿气势，定神片刻，泼墨挥毫，郑重地写下一行字：<code>hello world</code>。</p>
<p>3、问：程序员最讨厌康熙的哪个儿子。答：胤禩。因为他是八阿哥（<code>bug</code>）<br><a id="more"></a></p>
<p>4、程序猿要了3个孩子，分别取名叫<code>Ctrl</code>、<code>Alt</code> 和 <code>Delete</code>，如果他们不听话，程序猿就只要同时敲他们一下就会好的。</p>
<p>5、今天在公司听到一句惨绝人寰骂人的话：“你 <code>TM</code> 就是一个没有对象的野指针！”</p>
<p>6、程xx遭遇车祸成植物人，医生说她活下来的希望只有万分之一，唤醒更为渺茫。她的同事和亲人没放弃，并根据程xx对 <code>testing</code> 痴迷的作风，每天都在她身边念：“你测的模块上线后回滚了。”奇迹发生了，程xx醒来第一句话：确认那模块是我测的？</p>
<p>7、一个程序员在海滨游泳时溺水身亡。他死前拼命的呼救，当时海滩上有许多救生员，但是没有人救他。因为他一直大喊“<code>F1!</code>”“<code>F1!</code>”，谁都不知道“<code>F1</code>”究竟是什么意思。</p>
<p>8、世界上最远的距离，是我在 <code>if</code> 里你在 <code>else</code> 里，虽然经常一起出现，但却永不结伴执行。</p>
<p>9、正在码代码 <code>ing</code>，医院回来的同事一脸的苦逼样子，问他怎么了？他回答：得了类风湿性关节炎了，我怕会遗传给下一代啊。我一脸的问号：谁说类风湿性关节炎能遗传的？丫一脸诧异：类不是继承的吗？</p>
<p>10、我很奇怪客栈这个词，难道后入住的必须先退房吗？</p>
<p>11、话说，决定一个程序员跳槽与否的关键因素是他前同事的现工资。</p>
<p>12、程序员最憋屈的事情就是：你辛辛苦苦熬夜写了一个风格优雅的源文件，被一个代码风格极差的同事改了且没署名，以至于别人都以为你是写的。</p>
<p>13、前端工程师说，我去交友网站找女朋友去了。朋友问，找到了么？工程师说，找到了他们页面的一个 bug`。</p>
<p>14、<code>C</code> 程序看不起 <code>C++</code> 程序员， <code>C++</code> 程序员看不起 <code>Java</code> 程序员， <code>Java</code> 程序员看不起 <code>C#</code> 程序员，<code>C#</code> 程序员看不起美工，周末了，美工带着妹子出去约会了，一群程序员还在加班！</p>
<p>15、据说一老外年轻的时候，立志要当一名伟大的作家。怎么才算伟大呢？他说：我写的东西全世界都要看到！看完他们必定会歇斯底里！会火冒三丈！会痛苦万分！结果，他成功了，他在微软公司负责写系统蓝屏时的报错提示信息。</p>
<p>16、程序员应聘必备词汇：了解＝听过名字；熟悉＝知道是啥；熟练＝用过；精通＝做过东西。</p>
<p>17、两程序员聊天，程序员甲抱怨：“做程序员太辛苦了，我想换行……我该怎么办？”程序员乙：“敲一下回车。”</p>
<p>18、程序员最讨厌的四件事：写注释、写文档、别人不写注释、别人不写文档……</p>
<p>19、假如生活欺骗了你，找 <code>50</code> 个程序员问问为什么编程；假如生活让你想死，找 <code>50</code> 个程序员问问 <code>Bug</code> 改完了没有；假如你觉得生活拮据，找 <code>50</code> 个程序员问问工资涨了没有；假如你觉得活着无聊，找 <code>50</code> 个程序员问问他们一天都干了什么！</p>
<p>20、男人要记住，与女人吵架的要领是，要像在安装软件或注册网站时阅读 <code>服务条款</code> 那样，直接忽略所有的内容，到最后面勾选 <code>我同意</code>，然后点击 <code>确定</code>。</p>
<p>21、朋友今天遇到的真事：客户说我们设备卡，死活找不到原因，工程师赶到现场，给客户换了个鼠标垫，故障排除……</p>
<p>22、产品经理：“你明白吧，这里向右划可以出菜单，然后需要一个闪烁的动画，还有，我想这个tab可以拉下来，你懂吧？ 设计师：“别废话，把你要抄的产品给我看下。”</p>
<p>23、百度研发的无人驾驶汽车，你会发现有些地方你是去不了的。腾讯研发的无人驾驶汽车，你会发现很多地方你要去是要黄钻会员的。当然，谷歌研发的无人驾驶汽车，你会发现查无此车。</p>
<p>24、话说昨天是周日，程序猿跟产品经理一起看电视。每个节目看到一半程序猿就换台，看到一半就换台，几次之后产品经理终于忍无可忍的咆哮：老子刚看出点意思你就换、刚看出点意思你就换，到底还让不让人看啦？！程序猿淡定的盯着电视道：你半路改需求的时候我可没吱过声！</p>
<p>25、“为什么删除手机上的图标的时候它们会抖？”<br>“它们怕被删除呗。”<br>“那为什么电话短信之类系统自带的删不掉的也在抖呢？”<br>“那是它们在得瑟…”</p>
<p>26、有时候觉得，电脑就像一个高贵冷艳的妹纸。<br><code>400</code>，是她冷冰冰地说：“我听不懂你在说什么”；<br><code>401</code>，是她无情地转身：“我不认识你，别说那些奇怪的话”；<br><code>403</code>，是她残酷的拒绝：“我听懂你的话，也认出你的脸，可我不爱你”；<br><code>404</code>，是她紧闭心门：“我这儿没有你想要的东西”；<br><code>503</code>，是“呵呵我去洗澡”。</p>
<p>27、问：为何软件正在占领全世界，而程序员得不到尊重？答曰：遍身罗绮者，不是养蚕人。</p>
<p>28、她来例假了肚子疼，他坐着她旁边，看了她一眼，拿出手机玩游戏，她看在眼里，心里凉了半截。两分钟后，她实在坐不下去了，正准备离开，只见他默默地递过来他的小米手机说：拿去捂着。</p>
<p>29、惊闻微软要裁员 <code>1.8</code> 万人。他们就不能让这些员工们“在后台运行”吗？</p>
<p>30、今天看到我同事在笔记本电脑上实现 <code>滑动解锁</code> ！真的，看到我当场就震精了，异常碉堡……你知道吗？！他的电脑开机解锁密码是 <code>ASDFGHJKL;’</code> ，然后唰得一下过去最后一个键落在回车上，就，就解锁了！</p>
<p>31、骗子网站太特么多了，你一打开，必定跳出一个很下流的游戏广告！——但这还不是最关键的，关键是如果你忍不住点击进入游戏之后，就会发现这些下流的元素全都不见了！这也太没有职业道德了吧！</p>
<p>32、最近发现自己陷入了一种状态，叫开机迷失。开电脑前，该做什么清清楚楚。但只要一登录，随手开个网页，刷下新闻微博甚至仅仅是音乐网站，然后再回过神来，已经到了深夜，要做的事一项没做。而最痛苦的是，在睡前闭眼的时候，整个被浪费的白天和那些被耽误的正事，总会掺杂着负罪感，无比清晰地浮现。</p>
<p>33、我要设计一个新的智能机应用程序叫做 <code>惊慌</code>，只要你一说 <code>老婆</code> 这两个字, 它就会关闭所有网页, 隐藏所有跟女性的聊天以及怪怪的文件夹, 并且把我老婆的照片设为墙纸。</p>
<p>34、我从苹果手机的背面知道了一个好地方叫做加利福尼亚，据说那里有阳光和沙滩，还有 <code>Google</code> 和 <code>Tesla</code>。据说那里的人经常讨论怎么创业，而不是怎么移民。我虽然在中国，但也去过那里，不是在梦中，而是通过 <code>VPN</code>。</p>
<p>35、边上工位的妹纸叫柳依依，她的爸爸也是位程序员，依依的大姐叫玲玲，二姐叫玲依，三姐叫依玲</p>
<hr>
<p>整理自网络</p>
]]></content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt;以下是关于程序员的一些笑话，据说看懂的人都还在加班中。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;0、老婆给当程序员的老公打电话：下班顺路买十个包子，如果看到卖西瓜的，买一个。当晚老公手捧一个包子进了家门。老婆怒道：你怎么只买一个包子？！老公甚恐，喃喃道：因为我真看到卖西瓜的了。&lt;/p&gt;
&lt;p&gt;1、一程序员去面试，面试官问：“你毕业才两年，这三年工作经验是怎么来的？！”程序员答：“加班。”&lt;/p&gt;
&lt;p&gt;2、某程序员对书法十分感兴趣，退休后决定在这方面有所建树。于是花重金购买了上等的文房四宝。一日，饭后突生雅兴，一番磨墨拟纸，并点上了上好的檀香，颇有王羲之风范，又具颜真卿气势，定神片刻，泼墨挥毫，郑重地写下一行字：&lt;code&gt;hello world&lt;/code&gt;。&lt;/p&gt;
&lt;p&gt;3、问：程序员最讨厌康熙的哪个儿子。答：胤禩。因为他是八阿哥（&lt;code&gt;bug&lt;/code&gt;）&lt;br&gt;
    
    </summary>
    
      <category term="杂谈" scheme="http://ehlxr.me/categories/%E6%9D%82%E8%B0%88/"/>
    
    
      <category term="程序员幽默" scheme="http://ehlxr.me/tags/%E7%A8%8B%E5%BA%8F%E5%91%98%E5%B9%BD%E9%BB%98/"/>
    
  </entry>
  
  <entry>
    <title>Windows 10 删除、恢复资源管理器中“视频、图片”等文件夹</title>
    <link href="http://ehlxr.me/2016/10/25/Windows-10-%E5%88%A0%E9%99%A4%E3%80%81%E6%81%A2%E5%A4%8D%E8%B5%84%E6%BA%90%E7%AE%A1%E7%90%86%E5%99%A8%E4%B8%AD%E2%80%9C%E8%A7%86%E9%A2%91%E3%80%81%E5%9B%BE%E7%89%87%E2%80%9D%E7%AD%89%E6%96%87%E4%BB%B6%E5%A4%B9/"/>
    <id>http://ehlxr.me/2016/10/25/Windows-10-删除、恢复资源管理器中“视频、图片”等文件夹/</id>
    <published>2016-10-25T03:48:31.000Z</published>
    <updated>2016-11-01T09:31:10.216Z</updated>
    
    <content type="html"><![CDATA[<blockquote>
<p>Windows 10 资源管理器中的”视频、图片、文档、下载、音乐、桌面”等文件夹目前通过一般途径是删除不了的，只能通过注册表的删除删掉，本文介绍一种比较简单的删除、恢复方法。</p>
</blockquote>
<p><img src="http://oapjp6spr.bkt.clouddn.com/20161025111013.jpg" alt=""></p>
<a id="more"></a>
<h2 id="准备"><a href="#准备" class="headerlink" title="准备"></a>准备</h2><p>打开注册表（<code>Win+R</code> 输入 <code>regedit</code>）找到以下键：<br><code>HKEY_LOCAL_MACHINE\SOFTWARE\Microsoft\Windows\CurrentVersion\Explorer\MyComputer\NameSpace\</code> 单击 <code>NameSpace</code> 右键 <code>导出</code>，保存文件后缀名为 <code>.reg</code>。</p>
<h2 id="删除"><a href="#删除" class="headerlink" title="删除"></a>删除</h2><p>用文本编辑器打开该文件，只保留类似以下内容，并且在行首添加 <code>-</code> 号，然后保存。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div></pre></td><td class="code"><pre><div class="line">Windows Registry Editor Version 5.00</div><div class="line"></div><div class="line">[-HKEY_LOCAL_MACHINE\SOFTWARE\Microsoft\Windows\CurrentVersion\Explorer\MyComputer\NameSpace\&#123;088e3905-0323-4b02-9826-5d99428e115f&#125;]</div><div class="line"></div><div class="line">[-HKEY_LOCAL_MACHINE\SOFTWARE\Microsoft\Windows\CurrentVersion\Explorer\MyComputer\NameSpace\&#123;1CF1260C-4DD0-4ebb-811F-33C572699FDE&#125;]</div><div class="line"></div><div class="line">[-HKEY_LOCAL_MACHINE\SOFTWARE\Microsoft\Windows\CurrentVersion\Explorer\MyComputer\NameSpace\&#123;24ad3ad4-a569-4530-98e1-ab02f9417aa8&#125;]</div><div class="line"></div><div class="line">[-HKEY_LOCAL_MACHINE\SOFTWARE\Microsoft\Windows\CurrentVersion\Explorer\MyComputer\NameSpace\&#123;374DE290-123F-4565-9164-39C4925E467B&#125;]</div><div class="line"></div><div class="line">[-HKEY_LOCAL_MACHINE\SOFTWARE\Microsoft\Windows\CurrentVersion\Explorer\MyComputer\NameSpace\&#123;3ADD1653-EB32-4cb0-BBD7-DFA0ABB5ACCA&#125;]</div><div class="line"></div><div class="line">[-HKEY_LOCAL_MACHINE\SOFTWARE\Microsoft\Windows\CurrentVersion\Explorer\MyComputer\NameSpace\&#123;3dfdf296-dbec-4fb4-81d1-6a3438bcf4de&#125;]</div><div class="line"></div><div class="line">[-HKEY_LOCAL_MACHINE\SOFTWARE\Microsoft\Windows\CurrentVersion\Explorer\MyComputer\NameSpace\&#123;A0953C92-50DC-43bf-BE83-3742FED03C9C&#125;]</div><div class="line"></div><div class="line">[-HKEY_LOCAL_MACHINE\SOFTWARE\Microsoft\Windows\CurrentVersion\Explorer\MyComputer\NameSpace\&#123;A8CDFF1C-4878-43be-B5FD-F8091C1C60D0&#125;]</div><div class="line"></div><div class="line">[-HKEY_LOCAL_MACHINE\SOFTWARE\Microsoft\Windows\CurrentVersion\Explorer\MyComputer\NameSpace\&#123;B4BFCC3A-DB2C-424C-B029-7FE99A87C641&#125;]</div><div class="line"></div><div class="line">[-HKEY_LOCAL_MACHINE\SOFTWARE\Microsoft\Windows\CurrentVersion\Explorer\MyComputer\NameSpace\&#123;d3162b92-9365-467a-956b-92703aca08af&#125;]</div><div class="line"></div><div class="line">[-HKEY_LOCAL_MACHINE\SOFTWARE\Microsoft\Windows\CurrentVersion\Explorer\MyComputer\NameSpace\&#123;f86fa3ab-70d2-4fc7-9c99-fcbf05467f3a&#125;]</div></pre></td></tr></table></figure>
<p>双击该文件即可删除。</p>
<h2 id="恢复"><a href="#恢复" class="headerlink" title="恢复"></a>恢复</h2><p>想要恢复，编辑文件，删除行首 <code>-</code> 号，保存，双击运行即可恢复。</p>
<hr>
]]></content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt;Windows 10 资源管理器中的”视频、图片、文档、下载、音乐、桌面”等文件夹目前通过一般途径是删除不了的，只能通过注册表的删除删掉，本文介绍一种比较简单的删除、恢复方法。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;&lt;img src=&quot;http://oapjp6spr.bkt.clouddn.com/20161025111013.jpg&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="开发工具" scheme="http://ehlxr.me/categories/%E5%BC%80%E5%8F%91%E5%B7%A5%E5%85%B7/"/>
    
    
      <category term="Windows 10" scheme="http://ehlxr.me/tags/Windows-10/"/>
    
  </entry>
  
  <entry>
    <title>设置 Sublime Text3 主题透明</title>
    <link href="http://ehlxr.me/2016/10/24/%E8%AE%BE%E7%BD%AE-Sublime-Text3-%E4%B8%BB%E9%A2%98%E9%80%8F%E6%98%8E/"/>
    <id>http://ehlxr.me/2016/10/24/设置-Sublime-Text3-主题透明/</id>
    <published>2016-10-24T09:30:55.000Z</published>
    <updated>2016-11-01T09:31:10.232Z</updated>
    
    <content type="html"><![CDATA[<h1 id="1-下载安装包"><a href="#1-下载安装包" class="headerlink" title="1. 下载安装包"></a>1. 下载安装包</h1><p>下载地址：<a href="https://github.com/vhanla/SublimeTextTrans" target="_blank" rel="external">SublimeTextTrans</a>。</p>
<h1 id="2-安装插件"><a href="#2-安装插件" class="headerlink" title="2. 安装插件"></a>2. 安装插件</h1><p>解压到 Sublime Text3 的 Packages 存放目录下，命名为：<code>SublimeTextTrans</code>。点击 Sublime Text3 的 <code>Preferences -&gt; Browse Packages</code> 打开 Packages 存放目录，一般情况是在 <code>C:\Users\YOURNAME\AppData\Roaming\Sublime Text 3\Packages</code> 目录下。</p>
<h1 id="3-设置-Sublime-Text3-的透明度级别。"><a href="#3-设置-Sublime-Text3-的透明度级别。" class="headerlink" title="3. 设置 Sublime Text3 的透明度级别。"></a>3. 设置 Sublime Text3 的透明度级别。</h1><p>点击 Sublime Text3 的 <code>Preferences -&gt; Package Setting -&gt; SublimeTextTrans -&gt; Setting - User</code> 就可以设置透明度的级别了。</p>
<a id="more"></a>
<p>也可以通过 <code>Ctrl+Shift+1、2、3、4、5、6</code> 加载预设的 6 个透明级别。预设的透明级别在 <code>Preferences -&gt; Package Setting -&gt; SublimeTextTrans -&gt; Setting - Default</code> 中可以查看。</p>
<hr>
]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;1-下载安装包&quot;&gt;&lt;a href=&quot;#1-下载安装包&quot; class=&quot;headerlink&quot; title=&quot;1. 下载安装包&quot;&gt;&lt;/a&gt;1. 下载安装包&lt;/h1&gt;&lt;p&gt;下载地址：&lt;a href=&quot;https://github.com/vhanla/SublimeTextTrans&quot;&gt;SublimeTextTrans&lt;/a&gt;。&lt;/p&gt;
&lt;h1 id=&quot;2-安装插件&quot;&gt;&lt;a href=&quot;#2-安装插件&quot; class=&quot;headerlink&quot; title=&quot;2. 安装插件&quot;&gt;&lt;/a&gt;2. 安装插件&lt;/h1&gt;&lt;p&gt;解压到 Sublime Text3 的 Packages 存放目录下，命名为：&lt;code&gt;SublimeTextTrans&lt;/code&gt;。点击 Sublime Text3 的 &lt;code&gt;Preferences -&amp;gt; Browse Packages&lt;/code&gt; 打开 Packages 存放目录，一般情况是在 &lt;code&gt;C:\Users\YOURNAME\AppData\Roaming\Sublime Text 3\Packages&lt;/code&gt; 目录下。&lt;/p&gt;
&lt;h1 id=&quot;3-设置-Sublime-Text3-的透明度级别。&quot;&gt;&lt;a href=&quot;#3-设置-Sublime-Text3-的透明度级别。&quot; class=&quot;headerlink&quot; title=&quot;3. 设置 Sublime Text3 的透明度级别。&quot;&gt;&lt;/a&gt;3. 设置 Sublime Text3 的透明度级别。&lt;/h1&gt;&lt;p&gt;点击 Sublime Text3 的 &lt;code&gt;Preferences -&amp;gt; Package Setting -&amp;gt; SublimeTextTrans -&amp;gt; Setting - User&lt;/code&gt; 就可以设置透明度的级别了。&lt;/p&gt;
    
    </summary>
    
      <category term="开发工具" scheme="http://ehlxr.me/categories/%E5%BC%80%E5%8F%91%E5%B7%A5%E5%85%B7/"/>
    
    
      <category term="Sublime" scheme="http://ehlxr.me/tags/Sublime/"/>
    
  </entry>
  
  <entry>
    <title>[转]用 Markdown 写印象笔记（Evernote）</title>
    <link href="http://ehlxr.me/2016/10/19/%E8%BD%AC-%E7%94%A8-Markdown-%E5%86%99%E5%8D%B0%E8%B1%A1%E7%AC%94%E8%AE%B0%EF%BC%88Evernote%EF%BC%89/"/>
    <id>http://ehlxr.me/2016/10/19/转-用-Markdown-写印象笔记（Evernote）/</id>
    <published>2016-10-19T02:47:23.000Z</published>
    <updated>2016-11-01T09:31:10.237Z</updated>
    
    <content type="html"><![CDATA[<blockquote>
<p>使用印象笔记很久了，什么都觉得很好，就是不支持 Markdown 书写语法，实在是太遗憾了。今天发现网上有人介绍了一款 Sublime 的一个插件 <a href="https://packagecontrol.io/packages/Evernote" target="_blank" rel="external">Evernote</a>，尝试了一下觉得还是一个不错的方案，正好我也很喜欢使用 Sublime 编辑器，如此甚好，哈哈…</p>
</blockquote>
<!-- ![][2] -->
<img src="http://oapjp6spr.bkt.clouddn.com/2016101901.png" width="400">
<a id="more"></a>
<h1 id="一、安装"><a href="#一、安装" class="headerlink" title="一、安装"></a>一、安装</h1><h2 id="1-1-用-Sublime-的-PackageControl-安装-Evernote-插件"><a href="#1-1-用-Sublime-的-PackageControl-安装-Evernote-插件" class="headerlink" title="1.1 用 Sublime 的 PackageControl 安装 Evernote 插件"></a>1.1 用 Sublime 的 PackageControl 安装 <a href="https://packagecontrol.io/packages/Evernote" target="_blank" rel="external">Evernote</a> 插件</h2><h2 id="1-2-设置-Sublime-与印象笔记做关联"><a href="#1-2-设置-Sublime-与印象笔记做关联" class="headerlink" title="1.2 设置 Sublime 与印象笔记做关联"></a>1.2 设置 Sublime 与印象笔记做关联</h2><p>国内印象笔记用户打开链接：<a href="https://app.yinxiang.com/api/DeveloperToken.action" target="_blank" rel="external">https://app.yinxiang.com/api/DeveloperToken.action</a>，国际 Evernote 用户打开链接：<a href="https://www.evernote.com/api/DeveloperToken.action" target="_blank" rel="external">https://www.evernote.com/api/DeveloperToken.action</a>。然后点击页面按钮 <code>Create a developer token</code> 生成开发者秘钥。</p>
<p>打开 Sublime <code>Preferences -&gt; Package Settings -&gt; Evernote -&gt; Settings - User</code> 在文件中贴入如下内容：</p>
<figure class="highlight json"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">&#123;</div><div class="line"> <span class="attr">"noteStoreUrl"</span>: <span class="string">""</span>,</div><div class="line"> <span class="attr">"token"</span>: <span class="string">""</span></div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p><code>noteStoreUrl</code> 和 <code>token</code> 值为之前打开的页面的上的值，然后保存。</p>
<p>测试是否成功：通过快捷键 <code>ctrl+shift+p</code> 打开 Sublime 命令窗口，输入 <code>evernote</code>，就会看见 Evernote 的许多命令，点击 <code>evernote:list recent notes</code>，如果看到罗列出最新的笔记，则说明授权成功。</p>
<h1 id="二、快捷键设置"><a href="#二、快捷键设置" class="headerlink" title="二、快捷键设置"></a>二、快捷键设置</h1><p>插件默认没有添加快捷键，但可以自己配置。通过快捷键 <code>ctrl+shift+p</code> 打开 Sublime 命令窗口，输入 <code>key binding</code>，选择 <code>User</code> 那，写入你的内容。</p>
<p>下面是我的设置：</p>
<figure class="highlight json"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">[</div><div class="line">    &#123; <span class="attr">"keys"</span>: [<span class="string">"Ctrl+e"</span>, <span class="string">"Ctrl+o"</span>], <span class="attr">"command"</span>: <span class="string">"open_evernote_note"</span> &#125;,</div><div class="line">    &#123; <span class="attr">"keys"</span>: [<span class="string">"Ctrl+s"</span>], <span class="attr">"command"</span>: <span class="string">"save_evernote_note"</span>, <span class="attr">"context"</span>: [&#123;<span class="attr">"key"</span>: <span class="string">"evernote_note"</span>&#125;, &#123;<span class="attr">"key"</span>: <span class="string">"evernote_has_guid"</span>&#125;] &#125;,</div><div class="line">    &#123; <span class="attr">"keys"</span>: [<span class="string">"Ctrl+s"</span>], <span class="attr">"command"</span>: <span class="string">"send_to_evernote"</span>, <span class="attr">"context"</span>: [&#123;<span class="attr">"key"</span>: <span class="string">"evernote_note"</span>&#125;, &#123;<span class="attr">"key"</span>: <span class="string">"evernote_has_guid"</span>, <span class="attr">"operator"</span>: <span class="string">"equal"</span>, <span class="attr">"operand"</span>: <span class="literal">false</span>&#125;] &#125;</div><div class="line">]</div></pre></td></tr></table></figure>
<p><strong>解释：</strong>意思是，按 <code>ctrl+e, o</code> 后，会打开印象笔记，按 <code>ctrl+s</code> 会将笔记保存并且同步到印象笔记。</p>
<h1 id="三、常用命令"><a href="#三、常用命令" class="headerlink" title="三、常用命令"></a>三、常用命令</h1><p>通过快捷键 <code>ctrl+shift+p</code>，打开 Sublime 命令窗口就可以使用一些常用命令了。</p>
<ul>
<li><code>Evernote: New empty note</code>：创建笔记</li>
<li><code>Evernote: Open Evernote Note</code>：打开印象笔记</li>
<li><code>Evernote: List recent notes</code>：打开最近笔记</li>
<li><code>Evernote: Search note</code>：搜索笔记</li>
</ul>
<h1 id="四、个人配置"><a href="#四、个人配置" class="headerlink" title="四、个人配置"></a>四、个人配置</h1><p>主要更改了代码的字体和颜色，需要注意的是替换掉 <code>noteStoreUrl</code> 和 <code>token</code> 值为步骤 2 中获取内容。点击 Sublime Text 的 <code>Preferences -&gt; Package Settings -&gt; Evernote -&gt; Settings - User</code> 粘贴以下内容：</p>
<figure class="highlight json"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div></pre></td><td class="code"><pre><div class="line">&#123;</div><div class="line">    <span class="attr">"noteStoreUrl"</span>: <span class="string">"更换为步骤 2 中获取的 noteStoreUrl"</span>,</div><div class="line">    <span class="attr">"token"</span>: <span class="string">"更换为步骤 2 中获取的 token"</span>,</div><div class="line">    <span class="attr">"inline_css"</span>: &#123;</div><div class="line">        <span class="attr">"body"</span>: <span class="string">""</span>,</div><div class="line">        <span class="attr">"pre"</span>: <span class="string">"color: #000000; font-family: Consolas,monospace; font-size: 0.9em; white-space: pre-wrap; word-wrap: break-word; border: 1px solid #cccccc; border-radius: 3px; overflow: auto; padding: 6px 10px; margin-bottom: 10px;"</span>,</div><div class="line">        <span class="attr">"code"</span>: <span class="string">"color: black; font-family: Consolas,monospace; font-size: 1.1em;"</span>,</div><div class="line">        <span class="attr">"inline-code"</span>: <span class="string">"color: #c7254e; font-family: Consolas,monospace; padding: 0.1em 0.2em; margin: 0.1em; font-size: 85%; background-color: #f9f2f4; border-radius: 3px; border: 1px solid #d6d6d6;"</span>,</div><div class="line">        <span class="attr">"h1"</span>: <span class="string">"margin-bottom: 1em; margin-top: 1.2em;"</span>,</div><div class="line">        <span class="attr">"footnotes"</span>: <span class="string">"border-top: 1px solid #9AB39B; font-size: 80%;"</span>,</div><div class="line">        <span class="attr">"hr"</span>: <span class="string">"color:#9AB39B;background-color:#9AB39B;height:1px;border:none;"</span>,</div><div class="line">        <span class="attr">"sup"</span>: <span class="string">"color:#6D6D6D;font-size:1ex"</span>,</div><div class="line">        <span class="attr">"blockquote"</span>: <span class="string">"border-left: .5ex solid #BFBFBF; margin-left: 0px; padding-left: 1em; margin-top: 1.4285em; margin-bottom: 1.4285em;"</span>,</div><div class="line">        <span class="attr">"table"</span>: <span class="string">"border-collapse: collapse; border-spacing: 0; margin: 1em;"</span>,</div><div class="line">        <span class="attr">"td"</span>: <span class="string">"border: 1px solid #DDD; padding: 6px 13px;"</span>,</div><div class="line">        <span class="attr">"th"</span>: <span class="string">"border: 1px solid #DDD; padding: 6px 13px;"</span>,</div><div class="line">        <span class="attr">"tr:odd"</span>: <span class="string">"border: 1px solid #DDD; padding: 6px 13px;"</span>,</div><div class="line">        <span class="attr">"tr:even"</span>: <span class="string">"border: 1px solid #DDD; padding: 6px 13px; background-color: #F8F8F8;"</span></div><div class="line">    &#125;,</div><div class="line">    <span class="attr">"code_highlighting_style"</span>: <span class="string">"github"</span>,</div><div class="line">    <span class="attr">"code_friendly"</span>: <span class="literal">true</span>,</div><div class="line">    <span class="attr">"gfm_tables"</span>: <span class="literal">true</span>,</div><div class="line">    <span class="attr">"wiki_tables"</span>: <span class="literal">false</span>,</div><div class="line">    <span class="attr">"emphasis_mark"</span>: <span class="string">"_"</span>,</div><div class="line">    <span class="attr">"strong_mark"</span>: <span class="string">"**"</span>,</div><div class="line">    <span class="attr">"item_mark"</span>: <span class="string">"*"</span>,</div><div class="line">    <span class="attr">"notes_order"</span>: <span class="string">"updated"</span>,</div><div class="line">    <span class="attr">"max_notes"</span>: <span class="number">100</span>,</div><div class="line">    <span class="attr">"update_on_save"</span>: <span class="literal">false</span>,</div><div class="line">    <span class="attr">"evernote_autocomplete"</span>: <span class="literal">true</span>,</div><div class="line">    <span class="attr">"sort_notebooks"</span>: <span class="literal">false</span>,</div><div class="line">    <span class="attr">"show_stacks"</span>: <span class="literal">true</span>,</div><div class="line">    <span class="attr">"open_single_result"</span>: <span class="literal">true</span>,</div><div class="line">    <span class="attr">"tab_prefix"</span>: <span class="string">"Evernote: "</span>,</div><div class="line">    <span class="attr">"warn_on_close"</span>: <span class="literal">true</span></div><div class="line">&#125;</div></pre></td></tr></table></figure>
<hr>
<p><a href="http://www.jianshu.com/p/0add426fdd26" target="_blank" rel="external">原文地址</a></p>
]]></content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt;使用印象笔记很久了，什么都觉得很好，就是不支持 Markdown 书写语法，实在是太遗憾了。今天发现网上有人介绍了一款 Sublime 的一个插件 &lt;a href=&quot;https://packagecontrol.io/packages/Evernote&quot;&gt;Evernote&lt;/a&gt;，尝试了一下觉得还是一个不错的方案，正好我也很喜欢使用 Sublime 编辑器，如此甚好，哈哈…&lt;/p&gt;
&lt;/blockquote&gt;
&lt;!-- ![][2] --&gt;
&lt;img src=&quot;http://oapjp6spr.bkt.clouddn.com/2016101901.png&quot; width=&quot;400&quot;&gt;
    
    </summary>
    
      <category term="开发工具" scheme="http://ehlxr.me/categories/%E5%BC%80%E5%8F%91%E5%B7%A5%E5%85%B7/"/>
    
    
      <category term="Markdown" scheme="http://ehlxr.me/tags/Markdown/"/>
    
      <category term="Evernote" scheme="http://ehlxr.me/tags/Evernote/"/>
    
  </entry>
  
  <entry>
    <title>[转]Kafka入门教程</title>
    <link href="http://ehlxr.me/2016/10/10/%E8%BD%AC-Kafka%E5%85%A5%E9%97%A8%E6%95%99%E7%A8%8B/"/>
    <id>http://ehlxr.me/2016/10/10/转-Kafka入门教程/</id>
    <published>2016-10-10T13:40:52.000Z</published>
    <updated>2016-11-01T09:31:10.235Z</updated>
    
    <content type="html"><![CDATA[<h1 id="一、基本概念"><a href="#一、基本概念" class="headerlink" title="一、基本概念"></a>一、基本概念</h1><h2 id="1-介绍"><a href="#1-介绍" class="headerlink" title="1. 介绍"></a>1. 介绍</h2><p>Kafka 是一个分布式的、可分区的、可复制的消息系统。它提供了普通消息系统的功能，但具有自己独特的设计。<strong>这个独特的设计是什么样的呢？</strong></p>
<!-- ![][1] -->
<img src="http://oapjp6spr.bkt.clouddn.com/kafka-logo.png" width="400">
<a id="more"></a>
<p>首先让我们看几个基本的消息系统术语：</p>
<ul>
<li>Kafka 将消息以 topic 为单位进行归纳。</li>
<li>将向 Kafka topic 发布消息的程序成为 producers。</li>
<li>将预订 topics 并消费消息的程序成为 consumer。</li>
<li>Kafka 以集群的方式运行，可以由一个或多个服务组成，每个服务叫做一个 broker。</li>
<li>producers 通过网络将消息发送到 Kafka 集群，Kafka 集群向消费者提供消息，如下图所示：</li>
</ul>
<p><img src="http://oapjp6spr.bkt.clouddn.com/20161009001.png" alt=""></p>
<p>客户端和服务端通过 TCP 协议通信。Kafka 提供了 Java 客户端，并且对多种语言都提供了支持。</p>
<h2 id="2-Topics-和-Logs"><a href="#2-Topics-和-Logs" class="headerlink" title="2. Topics 和 Logs"></a>2. Topics 和 Logs</h2><p>先来看一下 Kafka 提供的一个抽象概念：<strong>topic</strong>。一个 topic 是对一组消息的归纳。对每个 topic，Kafka 对它的日志进行了分区，如下图所示：</p>
<!-- ![][3] -->
<img src="http://oapjp6spr.bkt.clouddn.com/20161009002.png" width="400">
<p>每个分区都由一系列有序的、不可变的消息组成，这些消息被连续的追加到分区中。分区中的每个消息都有一个连续的序列号叫做 offset，用来在分区中唯一的标识这个消息。</p>
<p>在一个可配置的时间段内，Kafka 集群保留所有发布的消息，不管这些消息有没有被消费。比如，如果消息的保存策略被设置为 2 天，那么在一个消息被发布的两天时间内，它都是可以被消费的。之后它将被丢弃以释放空间。Kafka 的性能是和数据量无关的常量级的，所以保留太多的数据并不是问题。</p>
<p>实际上每个 consumer 唯一需要维护的数据是消息在日志中的位置，也就是 offset。这个 offset 有 consumer 来维护：一般情况下随着 consumer 不断的读取消息，这 offset 的值不断增加，但其实 consumer 可以以任意的顺序读取消息，比如它可以将 offset 设置成为一个旧的值来重读之前的消息。</p>
<p>以上特点的结合，使 Kafka consumers 非常的轻量级：它们可以在不对集群和其他 consumer 造成影响的情况下读取消息。你可以使用命令行来 <code>tail</code> 消息而不会对其他正在消费消息的 consumer 造成影响。</p>
<p>将日志分区可以达到以下目的：首先这使得每个日志的数量不会太大，可以在单个服务上保存。另外每个分区可以单独发布和消费，为并发操作 topic 提供了一种可能。</p>
<h2 id="3-分布式"><a href="#3-分布式" class="headerlink" title="3. 分布式"></a>3. 分布式</h2><p>每个分区在 Kafka 集群的若干服务中都有副本，这样这些持有副本的服务可以共同处理数据和请求，副本数量是可以配置的。副本使 Kafka 具备了容错能力。</p>
<p>每个分区都由一个服务器作为 leader，零或若干服务器作为 followers，leader 负责处理消息的读和写，followers 则去复制 leader。如果 leader down 了，followers 中的一台则会自动成为 leader。集群中的每个服务都会同时扮演两个角色：作为它所持有的一部分分区的 leader，同时作为其他分区的 followers，这样集群就会据有较好的负载均衡。</p>
<h2 id="4-Producers"><a href="#4-Producers" class="headerlink" title="4. Producers"></a>4. Producers</h2><p>Producer 将消息发布到它指定的 topic 中,并负责决定发布到哪个分区。通常简单的由负载均衡机制随机选择分区，但也可以通过特定的分区函数选择分区。使用的更多的是第二种。</p>
<h2 id="5-Consumers"><a href="#5-Consumers" class="headerlink" title="5. Consumers"></a>5. Consumers</h2><p>发布消息通常有两种模式：队列模式（queuing）和发布-订阅模式（publish-subscribe）。</p>
<ul>
<li>队列模式中 consumers 可以同时从服务端读取消息，每个消息只被其中一个 consumer 读到。</li>
<li>发布-订阅模式中消息被广播到所有的 consumer 中。</li>
</ul>
<p>Consumers 可以加入一个 consumer 组，共同竞争一个 topic，topic 中的消息将被分发到组中的一个成员中。同一组中的 consumer 可以在不同的程序中，也可以在不同的机器上。如果所有的 consumer 都在一个组中，这就成为了传统的队列模式，在各 consumer 中实现负载均衡。如果所有的 consumer 都不在不同的组中，这就成为了发布-订阅模式，所有的消息都被分发到所有的 consumer 中。更常见的是，每个 topic 都有若干数量的 consumer 组，每个组都是一个逻辑上的 “订阅者”，为了容错和更好的稳定性，每个组由若干 consumer 组成。这其实就是一个发布-订阅模式，只不过订阅者是个组而不是单个consumer。</p>
<p><img src="http://oapjp6spr.bkt.clouddn.com/20161009003.png" alt="由两个机器组成的集群拥有 4 个分区（P0 - P3）2 个 consumer 组。A 组有两个 consumer，B 组有 4 个 consumer"></p>
<p><strong>相比传统的消息系统，Kafka 可以很好的保证有序性。</strong><br>传统的队列在服务器上保存有序的消息，如果多个 consumers 同时从这个服务器消费消息，服务器就会以消息存储的顺序向 consumer 分发消息。虽然服务器按顺序发布消息，但是消息是被异步的分发到各 consumer 上，所以当消息到达时可能已经失去了原来的顺序，这意味着并发消费将导致顺序错乱。为了避免故障，这样的消息系统通常使用 <code>专用consumer</code> 的概念，其实就是只允许一个消费者消费消息，当然这就意味着失去了并发性。</p>
<p>在这方面 Kafka 做的更好，通过分区的概念，Kafka 可以在多个 consumer 组并发的情况下提供较好的有序性和负载均衡。将每个分区分只分发给一个 consumer 组，这样一个分区就只被这个组的一个 consumer 消费，就可以顺序的消费这个分区的消息。因为有多个分区，依然可以在多个 consumer 组之间进行负载均衡。</p>
<p><strong><em>注意：</em></strong> consumer 组的数量不能多于分区的数量，也就是有多少分区就允许多少并发消费。</p>
<p>Kafka 只能保证一个分区之内消息的有序性，在不同的分区之间是不可以的，这已经可以满足大部分应用的需求。如果需要 topic 中所有消息的有序性，那就只能让这个 topic 只有一个分区，当然也就只有一个 consumer 组消费它。</p>
<h1 id="二、环境搭建"><a href="#二、环境搭建" class="headerlink" title="二、环境搭建"></a>二、环境搭建</h1><h2 id="Step-1：下载-Kafka"><a href="#Step-1：下载-Kafka" class="headerlink" title="Step 1：下载 Kafka"></a>Step 1：下载 Kafka</h2><p><a href="http://kafka.apache.org/downloads" target="_blank" rel="external">点击</a>下载最新的版本并解压。</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">$ tar -zxvf kafka_2.11-0.10.0.1.tgz -C ~/apps</div><div class="line">$ <span class="built_in">cd</span> kafka_2.11-0.10.0.1</div></pre></td></tr></table></figure>
<h2 id="Step-2：启动服务"><a href="#Step-2：启动服务" class="headerlink" title="Step 2：启动服务"></a>Step 2：启动服务</h2><p>Kafka 用到了 Zookeeper，所有首先启动 Zookeeper，下面简单的启用一个单实例的 Zookkeeper 服务。<del>可以在命令的结尾加个 <code>&amp;</code> 符号，这样就可以启动后离开控制台。</del></p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">$ ./bin/zkServer.sh start       </div><div class="line">ZooKeeper JMX enabled by default</div><div class="line">Using config: /home/ehlxr/apps/zookeeper-3.4.9/bin/../conf/zoo.cfg</div><div class="line">Starting zookeeper ... STARTED</div></pre></td></tr></table></figure>
<p>现在启动Kafka:</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">$ bin/kafka-server-start.sh config/server.properties</div><div class="line">[2013-04-22 15:01:47,028] INFO Verifying properties (kafka.utils.VerifiableProperties)</div><div class="line">[2013-04-22 15:01:47,051] INFO Property socket.send.buffer.bytes is overridden to 1048576 (kafka.utils.VerifiableProperties)</div></pre></td></tr></table></figure>
<h2 id="Step-3：创建-topic"><a href="#Step-3：创建-topic" class="headerlink" title="Step 3：创建 topic"></a>Step 3：创建 topic</h2><p>创建一个叫做 “test” 的 topic，它只有一个分区，一个副本。</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ bin/kafka-topics.sh --create --zookeeper localhost:2181 --replication-factor 1 --partitions 1 --topic <span class="built_in">test</span></div></pre></td></tr></table></figure>
<p>可以通过 list 命令查看创建的 topic：</p>
<figure class="highlight stata"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">$ bin/kafka-topics.<span class="keyword">sh</span> --<span class="keyword">list</span> --zookeeper localhost:2181</div><div class="line"><span class="keyword">test</span></div></pre></td></tr></table></figure>
<p>除了手动创建 topic，还可以配置 broker 让它自动创建 topic。</p>
<h2 id="Step-4：发送消息"><a href="#Step-4：发送消息" class="headerlink" title="Step 4：发送消息"></a>Step 4：发送消息</h2><p>Kafka 使用一个简单的命令行 producer，从文件中或者从标准输入中读取消息并发送到服务端。默认的每条命令将发送一条消息。</p>
<p>运行 producer 并在控制台中输一些消息，这些消息将被发送到服务端：</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">$ bin/kafka-console-producer.sh --broker-list localhost:9092 --topic <span class="built_in">test</span> </div><div class="line">This is a messageThis is another message</div></pre></td></tr></table></figure>
<p><code>ctrl+c</code> 可以退出发送。</p>
<h2 id="Step-5：启动-consumer"><a href="#Step-5：启动-consumer" class="headerlink" title="Step 5：启动 consumer"></a>Step 5：启动 consumer</h2><p>Kafka 也有一个命令行 consumer 可以读取消息并输出到标准输出：</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">$ bin/kafka-console-consumer.sh --zookeeper localhost:2181 --topic <span class="built_in">test</span> --from-beginning</div><div class="line">This is a message</div><div class="line">This is another message</div></pre></td></tr></table></figure>
<p>你在一个终端中运行 consumer 命令行，另一个终端中运行 producer 命令行，就可以在一个终端输入消息，另一个终端读取消息。</p>
<p>这两个命令都有自己的可选参数，可以在运行的时候不加任何参数可以看到帮助信息。</p>
<h2 id="Step-6：搭建一个多个-broker-的集群"><a href="#Step-6：搭建一个多个-broker-的集群" class="headerlink" title="Step 6：搭建一个多个 broker 的集群"></a>Step 6：搭建一个多个 broker 的集群</h2><p>刚才只是启动了单个 broker，现在启动有 3 个 broker 组成的集群，这些 broker 节点也都是在本机上的。</p>
<p>首先为每个节点编写配置文件：</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">$ cp config/server.properties config/server-1.properties</div><div class="line">$ cp config/server.properties config/server-2.properties</div></pre></td></tr></table></figure>
<p>在拷贝出的新文件中添加以下参数：</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">config/server-1.properties:</div><div class="line">    broker.id=1</div><div class="line">    port=9093</div><div class="line">    log.dir=/tmp/kafka-logs-1</div></pre></td></tr></table></figure>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">config/server-2.properties:</div><div class="line">    broker.id=2</div><div class="line">    port=9094</div><div class="line">    log.dir=/tmp/kafka-logs-2</div></pre></td></tr></table></figure>
<p>broker.id 在集群中唯一的标注一个节点，因为在同一个机器上，所以必须制定不同的端口和日志文件，避免数据被覆盖。</p>
<p>刚才已经启动可 Zookeeper 和一个节点，现在启动另外两个节点：</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">$ bin/kafka-server-start.sh config/server-1.properties &amp;</div><div class="line"></div><div class="line">$ bin/kafka-server-start.sh config/server-2.properties &amp;</div></pre></td></tr></table></figure>
<p>创建一个拥有 3 个副本的 topic：</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ bin/kafka-topics.sh --create --zookeeper localhost:2181 --replication-factor 3 --partitions 1 --topic my-replicated-topic</div></pre></td></tr></table></figure>
<p>现在我们搭建了一个集群，怎么知道每个节点的信息呢？运行 <code>describe topics</code> 命令就可以了：</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ bin/kafka-topics.sh --describe --zookeeper localhost:2181 --topic my-replicated-topic</div></pre></td></tr></table></figure>
<p>下面解释一下这些输出。第一行是对所有分区的一个描述，然后每个分区都会对应一行，因为我们只有一个分区所以下面就只加了一行。</p>
<ul>
<li>leader：负责处理消息的读和写，leader是从所有节点中随机选择的。</li>
<li>replicas：列出了所有的副本节点，不管节点是否在服务中。</li>
<li>isr：是正在服务中的节点。</li>
</ul>
<p>在我们的例子中，节点 1 是作为 leader 运行。</p>
<p>向 topic 发送消息：</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ bin/kafka-console-producer.sh --broker-list localhost:9092 --topic my-replicated-topic</div></pre></td></tr></table></figure>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">my <span class="built_in">test</span> message 1my <span class="built_in">test</span> message 2</div></pre></td></tr></table></figure>
<p>消费这些消息：</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ bin/kafka-console-consumer.sh --zookeeper localhost:2181 --from-beginning --topic my-replicated-topic</div></pre></td></tr></table></figure>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">my <span class="built_in">test</span> message 1</div><div class="line">my <span class="built_in">test</span> message 2</div></pre></td></tr></table></figure>
<p>测试一下容错能力，Broker 1 作为 leader 运行，现在我们 kill 掉它：</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">$ ps | grep server-1.properties7564 ttys002    0:15.91 /System/Library/Frameworks/JavaVM.framework/Versions/1.6/Home/bin/java...</div><div class="line">$ <span class="built_in">kill</span> -9 7564</div></pre></td></tr></table></figure>
<p>另外一个节点被选做了 leader，node 1 不再出现在 in-sync 副本列表中：</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">$ bin/kafka-topics.sh --describe --zookeeper localhost:218192 --topic my-replicated-topic</div><div class="line"></div><div class="line">Topic:my-replicated-topic       PartitionCount:1        ReplicationFactor:3     Configs:</div><div class="line">Topic: my-replicated-topic      Partition: 0    Leader: 2       Replicas: 1,2,0 Isr: 2,0</div></pre></td></tr></table></figure>
<p>虽然最初负责续写消息的 leader down 掉了，但之前的消息还是可以消费的：</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">$ bin/kafka-console-consumer.sh --zookeeper localhost:2181 --from-beginning --topic my-replicated-topic</div><div class="line">...</div><div class="line">my <span class="built_in">test</span> message 1</div><div class="line">my <span class="built_in">test</span> message 2</div></pre></td></tr></table></figure>
<p>看来 Kafka 的容错机制还是不错的。</p>
<h1 id="三、搭建Kafka开发环境"><a href="#三、搭建Kafka开发环境" class="headerlink" title="三、搭建Kafka开发环境"></a>三、搭建Kafka开发环境</h1><p>我们搭建了 kafka 的服务器，并可以使用 Kafka 的命令行工具创建 topic，发送和接收消息。下面我们来搭建 kafka 的开发环境。</p>
<h2 id="1-添加依赖"><a href="#1-添加依赖" class="headerlink" title="1. 添加依赖"></a>1. 添加依赖</h2><p>搭建开发环境需要引入 kafka 的 jar 包，一种方式是将 Kafka 安装包中 lib 下的 jar 包加入到项目的 classpath 中，这种比较简单了。不过我们使用另一种更加流行的方式：使用 maven 管理 jar 包依赖。</p>
<p>创建好 maven 项目后，在 pom.xml 中添加以下依赖：</p>
<figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span> org.apache.kafka<span class="tag">&lt;/<span class="name">groupId</span> &gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span> kafka_2.10<span class="tag">&lt;/<span class="name">artifactId</span> &gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span> 0.8.0<span class="tag">&lt;/ <span class="attr">version</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></div></pre></td></tr></table></figure>
<p>添加依赖后你会发现有两个 jar 包的依赖找不到。没关系我都帮你想好了，点击这里下载这两个 jar 包，解压后你有两种选择，第一种是使用 mvn 的 install 命令将 jar 包安装到本地仓库，另一种是直接将解压后的文件夹拷贝到 mvn 本地仓库的 com 文件夹下，比如我的本地仓库是 d:\mvn，完成后我的目录结构是这样的：</p>
<p><img src="http://oapjp6spr.bkt.clouddn.com/20161009004.png" alt=""></p>
<h2 id="2-配置程序"><a href="#2-配置程序" class="headerlink" title="2. 配置程序"></a>2. 配置程序</h2><p>首先是一个充当配置文件作用的接口,配置了 Kafka 的各种连接参数：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">package</span> com.sohu.kafkademon;</div><div class="line"></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">KafkaProperties</span> </span>&#123;</div><div class="line">    <span class="keyword">final</span> <span class="keyword">static</span> String zkConnect = <span class="string">"10.22.10.139:2181"</span>;</div><div class="line">    <span class="keyword">final</span> <span class="keyword">static</span> String groupId = <span class="string">"group1"</span>;</div><div class="line">    <span class="keyword">final</span> <span class="keyword">static</span> String topic = <span class="string">"topic1"</span>;</div><div class="line">    <span class="keyword">final</span> <span class="keyword">static</span> String kafkaServerURL = <span class="string">"10.22.10.139"</span>;</div><div class="line">    <span class="keyword">final</span> <span class="keyword">static</span> <span class="keyword">int</span> kafkaServerPort = <span class="number">9092</span>;</div><div class="line">    <span class="keyword">final</span> <span class="keyword">static</span> <span class="keyword">int</span> kafkaProducerBufferSize = <span class="number">64</span> * <span class="number">1024</span>;</div><div class="line">    <span class="keyword">final</span> <span class="keyword">static</span> <span class="keyword">int</span> connectionTimeOut = <span class="number">20000</span>;</div><div class="line">    <span class="keyword">final</span> <span class="keyword">static</span> <span class="keyword">int</span> reconnectInterval = <span class="number">10000</span>;</div><div class="line">    <span class="keyword">final</span> <span class="keyword">static</span> String topic2 = <span class="string">"topic2"</span>;</div><div class="line">    <span class="keyword">final</span> <span class="keyword">static</span> String topic3 = <span class="string">"topic3"</span>;</div><div class="line">    <span class="keyword">final</span> <span class="keyword">static</span> String clientId = <span class="string">"SimpleConsumerDemoClient"</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h2 id="3-Producer"><a href="#3-Producer" class="headerlink" title="3. Producer"></a>3. Producer</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">package</span> com.sohu.kafkademon;</div><div class="line"></div><div class="line"><span class="keyword">import</span> java.util.Properties;</div><div class="line"><span class="keyword">import</span> kafka.producer.KeyedMessage;</div><div class="line"><span class="keyword">import</span> kafka.producer.ProducerConfig;</div><div class="line"></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">KafkaProducer</span> <span class="keyword">extends</span> <span class="title">Thread</span> </span>&#123;</div><div class="line">    <span class="keyword">private</span> <span class="keyword">final</span> kafka.javaapi.producer.Producer&lt;Integer, String&gt; producer;</div><div class="line">    <span class="keyword">private</span> <span class="keyword">final</span> String topic;</div><div class="line">    <span class="keyword">private</span> <span class="keyword">final</span> Properties props = <span class="keyword">new</span> Properties();</div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="title">KafkaProducer</span><span class="params">(String topic)</span> </span>&#123;</div><div class="line">        props.put(<span class="string">"serializer.class"</span>, <span class="string">"kafka.serializer.StringEncoder"</span>);</div><div class="line">        props.put(<span class="string">"metadata.broker.list"</span>, <span class="string">"10.22.10.139:9092"</span>);</div><div class="line">        producer = <span class="keyword">new</span> kafka.javaapi.producer.Producer&lt;Integer, String&gt;(<span class="keyword">new</span> ProducerConfig(props));</div><div class="line">        <span class="keyword">this</span>.topic = topic;</div><div class="line">    &#125;</div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</div><div class="line">        <span class="keyword">int</span> messageNo = <span class="number">1</span>;</div><div class="line">        <span class="keyword">while</span> (<span class="keyword">true</span>) &#123;</div><div class="line">            String messageStr = <span class="keyword">new</span> String(<span class="string">"Message_"</span> + messageNo);</div><div class="line">            System.out.println(<span class="string">"Send:"</span> + messageStr);</div><div class="line">            producer.send(<span class="keyword">new</span> KeyedMessage&lt;Integer, String&gt;(topic, messageStr));</div><div class="line">            messageNo++;</div><div class="line">            <span class="keyword">try</span> &#123;</div><div class="line">                sleep(<span class="number">3000</span>);</div><div class="line">            &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</div><div class="line">                <span class="comment">// TODO Auto-generated catch block</span></div><div class="line">                e.printStackTrace();</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h2 id="4-Consumer"><a href="#4-Consumer" class="headerlink" title="4. Consumer"></a>4. Consumer</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">package</span> com.sohu.kafkademon;</div><div class="line"></div><div class="line"><span class="keyword">import</span> java.util.HashMap;</div><div class="line"><span class="keyword">import</span> java.util.List;</div><div class="line"><span class="keyword">import</span> java.util.Map;</div><div class="line"><span class="keyword">import</span> java.util.Properties;</div><div class="line"><span class="keyword">import</span> kafka.consumer.ConsumerConfig;</div><div class="line"><span class="keyword">import</span> kafka.consumer.ConsumerIterator;</div><div class="line"><span class="keyword">import</span> kafka.consumer.KafkaStream;</div><div class="line"><span class="keyword">import</span> kafka.javaapi.consumer.ConsumerConnector;</div><div class="line"></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">KafkaConsumer</span> <span class="keyword">extends</span> <span class="title">Thread</span> </span>&#123;</div><div class="line">    <span class="keyword">private</span> <span class="keyword">final</span> ConsumerConnector consumer;</div><div class="line">    <span class="keyword">private</span> <span class="keyword">final</span> String topic;</div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="title">KafkaConsumer</span><span class="params">(String topic)</span> </span>&#123;</div><div class="line">        consumer = kafka.consumer.Consumer.createJavaConsumerConnector(</div><div class="line">                createConsumerConfig());</div><div class="line">        <span class="keyword">this</span>.topic = topic;</div><div class="line">    &#125;</div><div class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">static</span> ConsumerConfig <span class="title">createConsumerConfig</span><span class="params">()</span> </span>&#123;</div><div class="line">        Properties props = <span class="keyword">new</span> Properties();</div><div class="line">        props.put(<span class="string">"zookeeper.connect"</span>, KafkaProperties.zkConnect);</div><div class="line">        props.put(<span class="string">"group.id"</span>, KafkaProperties.groupId);</div><div class="line">        props.put(<span class="string">"zookeeper.session.timeout.ms"</span>, <span class="string">"40000"</span>);</div><div class="line">        props.put(<span class="string">"zookeeper.sync.time.ms"</span>, <span class="string">"200"</span>);</div><div class="line">        props.put(<span class="string">"auto.commit.interval.ms"</span>, <span class="string">"1000"</span>);</div><div class="line">        <span class="keyword">return</span> <span class="keyword">new</span> ConsumerConfig(props);</div><div class="line">    &#125;</div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</div><div class="line">        Map&lt;String, Integer&gt; topicCountMap = <span class="keyword">new</span> HashMap&lt;String, Integer&gt;();</div><div class="line">        topicCountMap.put(topic, <span class="keyword">new</span> Integer(<span class="number">1</span>));</div><div class="line">        Map&lt;String, List&lt;KafkaStream&lt;<span class="keyword">byte</span>[], <span class="keyword">byte</span>[]&gt;&gt;&gt; consumerMap = consumer.createMessageStreams(topicCountMap);</div><div class="line">        KafkaStream&lt;<span class="keyword">byte</span>[], <span class="keyword">byte</span>[]&gt; stream = consumerMap.get(topic).get(<span class="number">0</span>);</div><div class="line">        ConsumerIterator&lt;<span class="keyword">byte</span>[], <span class="keyword">byte</span>[]&gt; it = stream.iterator();</div><div class="line">        <span class="keyword">while</span> (it.hasNext()) &#123;</div><div class="line">            System.out.println(<span class="string">"receive："</span> + <span class="keyword">new</span> String(it.next().message()));</div><div class="line">            <span class="keyword">try</span> &#123;</div><div class="line">                sleep(<span class="number">3000</span>);</div><div class="line">            &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</div><div class="line">                e.printStackTrace();</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h2 id="5-简单的发送接收"><a href="#5-简单的发送接收" class="headerlink" title="5. 简单的发送接收"></a>5. 简单的发送接收</h2><p>运行下面这个程序，就可以进行简单的发送接收消息了：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">package</span> com.sohu.kafkademon;</div><div class="line"></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">KafkaConsumerProducerDemo</span> </span>&#123;</div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span></span></div><div class="line">    &#123;</div><div class="line">        KafkaProducer producerThread = <span class="keyword">new</span> KafkaProducer(KafkaProperties.topic);</div><div class="line">        producerThread.start();</div><div class="line">        KafkaConsumer consumerThread = <span class="keyword">new</span> KafkaConsumer(KafkaProperties.topic);</div><div class="line">        consumerThread.start();</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h2 id="6-高级别的consumer"><a href="#6-高级别的consumer" class="headerlink" title="6. 高级别的consumer"></a>6. 高级别的consumer</h2><p>下面是比较负载的发送接收的程序：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">package</span> com.sohu.kafkademon;</div><div class="line"></div><div class="line"><span class="keyword">import</span> java.util.HashMap;</div><div class="line"><span class="keyword">import</span> java.util.List;</div><div class="line"><span class="keyword">import</span> java.util.Map;</div><div class="line"><span class="keyword">import</span> java.util.Properties;</div><div class="line"><span class="keyword">import</span> kafka.consumer.ConsumerConfig;</div><div class="line"><span class="keyword">import</span> kafka.consumer.ConsumerIterator;</div><div class="line"><span class="keyword">import</span> kafka.consumer.KafkaStream;</div><div class="line"><span class="keyword">import</span> kafka.javaapi.consumer.ConsumerConnector;</div><div class="line"></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">KafkaConsumer</span> <span class="keyword">extends</span> <span class="title">Thread</span> </span>&#123;</div><div class="line">    <span class="keyword">private</span> <span class="keyword">final</span> ConsumerConnector consumer;</div><div class="line">    <span class="keyword">private</span> <span class="keyword">final</span> String topic;</div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="title">KafkaConsumer</span><span class="params">(String topic)</span> </span>&#123;</div><div class="line">        consumer = kafka.consumer.Consumer.createJavaConsumerConnector(</div><div class="line">                createConsumerConfig());</div><div class="line">        <span class="keyword">this</span>.topic = topic;</div><div class="line">    &#125;</div><div class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">static</span> ConsumerConfig <span class="title">createConsumerConfig</span><span class="params">()</span> </span>&#123;</div><div class="line">        Properties props = <span class="keyword">new</span> Properties();</div><div class="line">        props.put(<span class="string">"zookeeper.connect"</span>, KafkaProperties.zkConnect);</div><div class="line">        props.put(<span class="string">"group.id"</span>, KafkaProperties.groupId);</div><div class="line">        props.put(<span class="string">"zookeeper.session.timeout.ms"</span>, <span class="string">"40000"</span>);</div><div class="line">        props.put(<span class="string">"zookeeper.sync.time.ms"</span>, <span class="string">"200"</span>);</div><div class="line">        props.put(<span class="string">"auto.commit.interval.ms"</span>, <span class="string">"1000"</span>);</div><div class="line">        <span class="keyword">return</span> <span class="keyword">new</span> ConsumerConfig(props);</div><div class="line">    &#125;</div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</div><div class="line">        Map&lt;String, Integer&gt; topicCountMap = <span class="keyword">new</span> HashMap&lt;String, Integer&gt;();</div><div class="line">        topicCountMap.put(topic, <span class="keyword">new</span> Integer(<span class="number">1</span>));</div><div class="line">        Map&lt;String, List&lt;KafkaStream&lt;<span class="keyword">byte</span>[], <span class="keyword">byte</span>[]&gt;&gt;&gt; consumerMap = consumer.createMessageStreams(topicCountMap);</div><div class="line">        KafkaStream&lt;<span class="keyword">byte</span>[], <span class="keyword">byte</span>[]&gt; stream = consumerMap.get(topic).get(<span class="number">0</span>);</div><div class="line">        ConsumerIterator&lt;<span class="keyword">byte</span>[], <span class="keyword">byte</span>[]&gt; it = stream.iterator();</div><div class="line">        <span class="keyword">while</span> (it.hasNext()) &#123;</div><div class="line">            System.out.println(<span class="string">"receive："</span> + <span class="keyword">new</span> String(it.next().message()));</div><div class="line">            <span class="keyword">try</span> &#123;</div><div class="line">                sleep(<span class="number">3000</span>);</div><div class="line">            &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</div><div class="line">                e.printStackTrace();</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h1 id="四、数据持久化"><a href="#四、数据持久化" class="headerlink" title="四、数据持久化"></a>四、数据持久化</h1><h2 id="1-不要畏惧文件系统"><a href="#1-不要畏惧文件系统" class="headerlink" title="1. 不要畏惧文件系统!"></a>1. 不要畏惧文件系统!</h2><p>Kafka 大量依赖文件系统去存储和缓存消息。对于硬盘有个传统的观念是硬盘总是很慢，这使很多人怀疑基于文件系统的架构能否提供优异的性能。实际上硬盘的快慢完全取决于使用它的方式。设计良好的硬盘架构可以和内存一样快。</p>
<p>在 6 块 7200 转的 SATA RAID-5 磁盘阵列的线性写速度差不多是 600MB/s，但是随即写的速度却是 100k/s，差了差不多6000倍。现代的操作系统都对次做了大量的优化，使用了 read-ahead 和 write-behind 的技巧，读取的时候成块的预读取数据，写的时候将各种微小琐碎的逻辑写入组织合并成一次较大的物理写入。对此的深入讨论可以查看这里，它们发现线性的访问磁盘，很多时候比随机的内存访问快得多。</p>
<p>为了提高性能，现代操作系统往往使用内存作为磁盘的缓存，现代操作系统乐于把所有空闲内存用作磁盘缓存，虽然这可能在缓存回收和重新分配时牺牲一些性能。所有的磁盘读写操作都会经过这个缓存，这不太可能被绕开除非直接使用 I/O。所以虽然每个程序都在自己的线程里只缓存了一份数据，但在操作系统的缓存里还有一份，这等于存了两份数据。</p>
<p><strong>另外再来讨论一下 JVM，以下两个事实是众所周知的：</strong></p>
<ul>
<li>Java对象占用空间是非常大的，差不多是要存储的数据的两倍甚至更高。</li>
<li>随着堆中数据量的增加，垃圾回收回变的越来越困难。</li>
</ul>
<p>基于以上分析，如果把数据缓存在内存里，因为需要存储两份，不得不使用两倍的内存空间，Kafka 基于 JVM，又不得不将空间再次加倍,再加上要避免 GC 带来的性能影响，在一个 32G 内存的机器上，不得不使用到 28-30G 的内存空间。并且当系统重启的时候，又必须要将数据刷到内存中（10GB 内存差不多要用10分钟），就算使用冷刷新（不是一次性刷进内存，而是在使用数据的时候没有就刷到内存）也会导致最初的时候新能非常慢。但是使用文件系统，即使系统重启了，也不需要刷新数据。使用文件系统也简化了维护数据一致性的逻辑。</p>
<p>所以与传统的将数据缓存在内存中然后刷到硬盘的设计不同，Kafka 直接将数据写到了文件系统的日志中。</p>
<h2 id="2-常量时间的操作效率"><a href="#2-常量时间的操作效率" class="headerlink" title="2. 常量时间的操作效率"></a>2. 常量时间的操作效率</h2><p>在大多数的消息系统中，数据持久化的机制往往是为每个 cosumer 提供一个 B 树或者其他的随机读写的数据结构。B 树当然是很棒的，但是也带了一些代价：比如 B 树的复杂度是 O(log N)，O(log N) 通常被认为就是常量复杂度了，但对于硬盘操作来说并非如此。磁盘进行一次搜索需要 10ms，每个硬盘在同一时间只能进行一次搜索，这样并发处理就成了问题。虽然存储系统使用缓存进行了大量优化，但是对于树结构的性能的观察结果却表明，它的性能往往随着数据的增长而线性下降，数据增长一倍，速度就会降低一倍。</p>
<p>直观的讲，对于主要用于日志处理的消息系统，数据的持久化可以简单的通过将数据追加到文件中实现，读的时候从文件中读就好了。这样做的好处是读和写都是 O(1) 的，并且读操作不会阻塞写操作和其他操作。这样带来的性能优势是很明显的，因为性能和数据的大小没有关系了。</p>
<p>既然可以使用几乎没有容量限制（相对于内存来说）的硬盘空间建立消息系统，就可以在没有性能损失的情况下提供一些一般消息系统不具备的特性。比如，一般的消息系统都是在消息被消费后立即删除，Kafka 却可以将消息保存一段时间（比如一星期），这给 consumer 提供了很好的机动性和灵活性，这点在今后的文章中会有详述。</p>
<h1 id="五、消息传输的事务定义"><a href="#五、消息传输的事务定义" class="headerlink" title="五、消息传输的事务定义"></a>五、消息传输的事务定义</h1><p>之前讨论了 consumer 和 producer 是怎么工作的，现在来讨论一下数据传输方面。数据传输的事务定义通常有以下三种级别：</p>
<ol>
<li>最多一次: 消息不会被重复发送，最多被传输一次，但也有可能一次不传输。</li>
<li>最少一次: 消息不会被漏发送，最少被传输一次，但也有可能被重复传输。</li>
<li>精确的一次（Exactly once）: 不会漏传输也不会重复传输,每个消息都传输被一次而且仅仅被传输一次，这是大家所期望的。</li>
</ol>
<p>大多数消息系统声称可以做到 “精确的一次”，但是仔细阅读它们的的文档可以看到里面存在误导，比如没有说明当 consumer 或 producer 失败时怎么样，或者当有多个 consumer 并行时怎么样，或写入硬盘的数据丢失时又会怎么样。kafka 的做法要更先进一些。当发布消息时，Kafka 有一个 “committed” 的概念，一旦消息被提交了，只要消息被写入的分区的所在的副本 broker 是活动的，数据就不会丢失。关于副本的活动的概念，下节文档会讨论。现在假设 broker 是不会 down 的。</p>
<p>如果 producer 发布消息时发生了网络错误，但又不确定实在提交之前发生的还是提交之后发生的，这种情况虽然不常见，但是必须考虑进去，现在 Kafka 版本还没有解决这个问题，将来的版本正在努力尝试解决。</p>
<p>并不是所有的情况都需要 “精确的一次” 这样高的级别，Kafka 允许 producer 灵活的指定级别。比如 producer 可以指定必须等待消息被提交的通知，或者完全的异步发送消息而不等待任何通知，或者仅仅等待 leader 声明它拿到了消息（followers 没有必要）。</p>
<p>现在从 consumer 的方面考虑这个问题，所有的副本都有相同的日志文件和相同的 offset，consumer 维护自己消费的消息的 offset，如果 consumer 不会崩溃当然可以在内存中保存这个值，当然谁也不能保证这点。如果 consumer 崩溃了，会有另外一个 consumer 接着消费消息，它需要从一个合适的 offset 继续处理。这种情况下可以有以下选择：</p>
<ul>
<li>consumer 可以先读取消息，然后将 offset 写入日志文件中，然后再处理消息。这存在一种可能就是在存储 offset 后还没处理消息就 crash 了，新的 consumer 继续从这个 offset 处理，那么就会有些消息永远不会被处理，这就是上面说的 “最多一次”。</li>
<li>consumer 可以先读取消息，处理消息，最后记录 offset，当然如果在记录 offset 之前就 crash 了，新的 consumer 会重复的消费一些消息，这就是上面说的 “最少一次”。</li>
<li>“精确一次” 可以通过将提交分为两个阶段来解决：保存了 offset 后提交一次，消息处理成功之后再提交一次。但是还有个更简单的做法：将消息的 offset 和消息被处理后的结果保存在一起。比如用 Hadoop ETL 处理消息时，将处理后的结果和 offset 同时保存在 HDFS 中，这样就能保证消息和 offser 同时被处理了。</li>
</ul>
<h1 id="六、性能优化"><a href="#六、性能优化" class="headerlink" title="六、性能优化"></a>六、性能优化</h1><p>Kafka 在提高效率方面做了很大努力。Kafka 的一个主要使用场景是处理网站活动日志，吞吐量是非常大的，每个页面都会产生好多次写操作。读方面，假设每个消息只被消费一次，读的量的也是很大的，Kafka 也尽量使读的操作更轻量化。</p>
<p>我们之前讨论了磁盘的性能问题，线性读写的情况下影响磁盘性能问题大约有两个方面：太多的琐碎的 I/O 操作和太多的字节拷贝。I/O 问题发生在客户端和服务端之间，也发生在服务端内部的持久化的操作中。</p>
<h2 id="1-消息集（message-set）"><a href="#1-消息集（message-set）" class="headerlink" title="1. 消息集（message set）"></a>1. 消息集（message set）</h2><p>为了避免这些问题，Kafka 建立了 “消息集（message set）” 的概念，将消息组织到一起，作为处理的单位。以消息集为单位处理消息，比以单个的消息为单位处理，会提升不少性能。Producer 把消息集一块发送给服务端，而不是一条条的发送；服务端把消息集一次性的追加到日志文件中，这样减少了琐碎的 I/O 操作。consumer 也可以一次性的请求一个消息集。</p>
<p>另外一个性能优化是在字节拷贝方面。在低负载的情况下这不是问题，但是在高负载的情况下它的影响还是很大的。为了避免这个问题，Kafka 使用了标准的二进制消息格式，这个格式可以在 producer，broker 和 producer 之间共享而无需做任何改动。</p>
<h2 id="2-Zero-Copy"><a href="#2-Zero-Copy" class="headerlink" title="2. Zero Copy"></a>2. Zero Copy</h2><p>Broker 维护的消息日志仅仅是一些目录文件，消息集以固定队的格式写入到日志文件中，这个格式 producer 和 consumer 是共享的，这使得 Kafka 可以一个很重要的点进行优化：消息在网络上的传递。现代的 unix 操作系统提供了高性能的将数据从页面缓存发送到 socket 的系统函数，在 linux 中，这个函数是 sendfile。</p>
<p>为了更好的理解 sendfile 的好处，我们先来看下一般将数据从文件发送到 socket 的数据流向：</p>
<ol>
<li>操作系统把数据从文件拷贝内核中的页缓存中</li>
<li>应用程序从页缓存从把数据拷贝自己的内存缓存中</li>
<li>应用程序将数据写入到内核中 socket 缓存中操作系统把数据从 socket 缓存中拷贝到网卡接口缓存，从这里发送到网络上。</li>
</ol>
<p>这显然是低效率的，有 4 次拷贝和 2 次系统调用。Sendfile 通过直接将数据从页面缓存发送网卡接口缓存，避免了重复拷贝，大大的优化了性能。</p>
<p>在一个多 consumers 的场景里，数据仅仅被拷贝到页面缓存一次而不是每次消费消息的时候都重复的进行拷贝。这使得消息以近乎网络带宽的速率发送出去。这样在磁盘层面你几乎看不到任何的读操作，因为数据都是从页面缓存中直接发送到网络上去了。</p>
<p><a href="https://www.ibm.com/developerworks/linux/library/j-zerocopy/" target="_blank" rel="external">这篇文章</a>详细介绍了 sendfile 和 zero-copy 技术在 Java 方面的应用。</p>
<h2 id="3-数据压缩"><a href="#3-数据压缩" class="headerlink" title="3. 数据压缩"></a>3. 数据压缩</h2><p>很多时候，性能的瓶颈并非 CPU 或者硬盘而是网络带宽，对于需要在数据中心之间传送大量数据的应用更是如此。当然用户可以在没有 Kafka 支持的情况下各自压缩自己的消息，但是这将导致较低的压缩率，因为相比于将消息单独压缩，将大量文件压缩在一起才能起到最好的压缩效果。</p>
<p>Kafka 采用了端到端的压缩：因为有 “消息集” 的概念，客户端的消息可以一起被压缩后送到服务端，并以压缩后的格式写入日志文件，以压缩的格式发送到 consumer，消息从 producer 发出到 consumer 拿到都被是压缩的，只有在 consumer 使用的时候才被解压缩，所以叫做 “端到端的压缩”。</p>
<p>Kafka 支持 GZIP 和 Snappy 压缩协议。更详细的内容可以查看<a href="https://cwiki.apache.org/confluence/display/KAFKA/Compression" target="_blank" rel="external">这里</a>。</p>
<h1 id="七、Producer-和-Consumer"><a href="#七、Producer-和-Consumer" class="headerlink" title="七、Producer 和 Consumer"></a>七、Producer 和 Consumer</h1><h2 id="1-Kafka-Producer-消息发送"><a href="#1-Kafka-Producer-消息发送" class="headerlink" title="1. Kafka Producer 消息发送"></a>1. Kafka Producer 消息发送</h2><p>producer 直接将数据发送到 broker 的 leader（主节点），不需要在多个节点进行分发。为了帮助 producer 做到这点，所有的 Kafka 节点都可以及时的告知：哪些节点是活动的，目标 topic 目标分区的 leader 在哪。这样 producer 就可以直接将消息发送到目的地了。</p>
<p>客户端控制消息将被分发到哪个分区。可以通过负载均衡随机的选择，或者使用分区函数。Kafka 允许用户实现分区函数，指定分区的 key，将消息 hash 到不同的分区上（当然有需要的话，也可以覆盖这个分区函数自己实现逻辑）。比如如果你指定的 key 是 user id，那么同一个用户发送的消息都被发送到同一个分区上。经过分区之后，consumer 就可以有目的的消费某个分区的消息。</p>
<h2 id="2-异步发送"><a href="#2-异步发送" class="headerlink" title="2. 异步发送"></a>2. 异步发送</h2><p>批量发送可以很有效的提高发送效率。Kafka producer 的异步发送模式允许进行批量发送，先将消息缓存在内存中，然后一次请求批量发送出去。这个策略可以配置的，比如可以指定缓存的消息达到某个量的时候就发出去，或者缓存了固定的时间后就发送出去（比如 100 条消息就发送，或者每 5 秒发送一次）。这种策略将大大减少服务端的 I/O 次数。</p>
<p>既然缓存是在 producer 端进行的，那么当 producer 崩溃时，这些消息就会丢失。Kafka 0.8.1 的异步发送模式还不支持回调，就不能在发送出错时进行处理。Kafka 0.9 可能会增加这样的回调函数。见 <a href="https://cwiki.apache.org/confluence/display/KAFKA/Client+Rewrite#ClientRewrite-ProposedProducerAPI" target="_blank" rel="external">Proposed Producer API</a>。</p>
<h2 id="3-Kafka-Consumer"><a href="#3-Kafka-Consumer" class="headerlink" title="3. Kafka Consumer"></a>3. Kafka Consumer</h2><p>Kafa consumer 消费消息时，向broker发出 <code>fetch</code> 请求去消费特定分区的消息。consumer 指定消息在日志中的偏移量（offset），就可以消费从这个位置开始的消息。customer 拥有了 offset 的控制权，可以向后回滚去重新消费之前的消息，这是很有意义的。</p>
<h2 id="4-推还是拉？"><a href="#4-推还是拉？" class="headerlink" title="4. 推还是拉？"></a>4. 推还是拉？</h2><p>Kafka 最初考虑的问题是，customer 应该从 brokes 拉取消息还是 brokers 将消息推送到 consumer，也就是 pull 还 push。在这方面，Kafka 遵循了一种大部分消息系统共同的传统的设计：producer 将消息推送到 broker，consumer 从 broker 拉取消息。</p>
<p>一些消息系统比如 Scribe 和 Apache Flume 采用了push 模式，将消息推送到下游的 consumer。这样做有好处也有坏处：由 broker 决定消息推送的速率，对于不同消费速率的 consumer 就不太好处理了。消息系统都致力于让 consumer 以最大的速率最快速的消费消息，但不幸的是，push 模式下，当 broker 推送的速率远大于 consumer 消费的速率时，consumer 恐怕就要崩溃了。最终 Kafka 还是选取了传统的 pull 模式。</p>
<p>Pull 模式的另外一个好处是 consumer 可以自主决定是否批量的从 broker 拉取数据。Push 模式必须在不知道下游 consumer 消费能力和消费策略的情况下决定是立即推送每条消息还是缓存之后批量推送。如果为了避免 consumer 崩溃而采用较低的推送速率，将可能导致一次只推送较少的消息而造成浪费。Pull 模式下，consumer 就可以根据自己的消费能力去决定这些策略。</p>
<p>Pull 有个缺点是，如果 broker 没有可供消费的消息，将导致 consumer 不断在循环中轮询，直到新消息到 t 达。为了避免这点，Kafka 有个参数可以让 consumer 阻塞知道新消息到达（当然也可以阻塞知道消息的数量达到某个特定的量这样就可以批量发送）。</p>
<h2 id="5-消费状态跟踪"><a href="#5-消费状态跟踪" class="headerlink" title="5. 消费状态跟踪"></a>5. 消费状态跟踪</h2><p>对消费消息状态的记录也是很重要的。</p>
<p>大部分消息系统在 broker 端的维护消息被消费的记录：一个消息被分发到 consumer 后 broker 就马上进行标记或者等待 customer  的通知后进行标记。这样也可以在消息在消费后立马就删除以减少空间占用。</p>
<p><strong>但是这样会不会有什么问题呢</strong>？如果一条消息发送出去之后就立即被标记为消费过的，一旦 consumer 处理消息时失败了（比如程序崩溃）消息就丢失了。为了解决这个问题，很多消息系统提供了另外一个个功能：当消息被发送出去之后仅仅被标记为已发送状态，当接到 consumer 已经消费成功的通知后才标记为已被消费的状态。这虽然解决了消息丢失的问题，但产生了新问题，首先如果 consumer 处理消息成功了但是向 broker 发送响应时失败了，这条消息将被消费两次。第二个问题时，broker 必须维护每条消息的状态，并且每次都要先锁住消息然后更改状态然后释放锁。这样麻烦又来了，且不说要维护大量的状态数据，比如如果消息发送出去但没有收到消费成功的通知，这条消息将一直处于被锁定的状态，<br>Kafka 采用了不同的策略。Topic 被分成了若干分区，每个分区在同一时间只被一个 consumer 消费。这意味着每个分区被消费的消息在日志中的位置仅仅是一个简单的整数：offset。这样就很容易标记每个分区消费状态就很容易了，仅仅需要一个整数而已。这样消费状态的跟踪就很简单了。</p>
<p>这带来了另外一个好处：consumer 可以把 offset 调成一个较老的值，去重新消费老的消息。这对传统的消息系统来说看起来有些不可思议，但确实是非常有用的，谁规定了一条消息只能被消费一次呢？consumer发现解析数据的程序有 bug，在修改 bug 后再来解析一次消息，看起来是很合理的额呀！</p>
<h2 id="6-离线处理消息"><a href="#6-离线处理消息" class="headerlink" title="6. 离线处理消息"></a>6. 离线处理消息</h2><p>高级的数据持久化允许 consumer 每个隔一段时间批量的将数据加载到线下系统中比如 <a href="http://www.linuxidc.com/topicnews.aspx?tid=13" target="_blank" rel="external">Hadoop</a> 或者数据仓库。这种情况下，Hadoop 可以将加载任务分拆，拆成每个 broker 或每个 topic 或每个分区一个加载任务。Hadoop 具有任务管理功能，当一个任务失败了就可以重启而不用担心数据被重新加载，只要从上次加载的位置继续加载消息就可以了。</p>
<h1 id="八、主从同步"><a href="#八、主从同步" class="headerlink" title="八、主从同步"></a>八、主从同步</h1><p>Kafka 允许 topic 的分区拥有若干副本，这个数量是可以配置的，你可以为每个 topic 配置副本的数量。Kafka 会自动在每个个副本上备份数据，所以当一个节点 down 掉时数据依然是可用的。</p>
<p>Kafka 的副本功能不是必须的，你可以配置只有一个副本，这样其实就相当于只有一份数据。</p>
<p>创建副本的单位是 topic 的分区，每个分区都有一个 leader 和零或多个 followers。所有的读写操作都由 leader 处理，一般分区的数量都比 broker 的数量多的多，各分区的 leader 均匀的分布在 brokers 中。所有的 followers 都复制 leader 的日志，日志中的消息和顺序都和 leader 中的一致。flowers 向普通的 consumer 那样从 leader 那里拉取消息并保存在自己的日志文件中。</p>
<p>许多分布式的消息系统自动的处理失败的请求，它们对一个节点是否存活着（alive）有着清晰的定义。<strong>Kafka 判断一个节点是否活着有两个条件：</strong></p>
<ol>
<li>节点必须可以维护和 ZooKeeper 的连接，Zookeeper 通过心跳机制检查每个节点的连接。</li>
<li>如果节点是个 follower，他必须能及时的同步 leader 的写操作，延时不能太久。</li>
</ol>
<p>符合以上条件的节点准确的说应该是“同步中的（in sync）”，而不是模糊的说是 “活着的” 或是 “失败的”。Leader 会追踪所有 “同步中” 的节点，一旦一个 down 掉了，或是卡住了，或是延时太久，leader 就会把它移除。至于延时多久算是 “太久”，是由参数 <code>replica.lag.max.messages</code> 决定的，怎样算是卡住了，怎是由参数 <code>replica.lag.time.max.ms</code> 决定的。</p>
<p>只有当消息被所有的副本加入到日志中时，才算是 “committed”，只有 committed 的消息才会发送给 consumer，这样就不用担心一旦 leader down 掉了消息会丢失。Producer 也可以选择是否等待消息被提交的通知，这个是由参数 <code>request.required.acks</code> 决定的。</p>
<p>Kafka 保证只要有一个 “同步中” 的节点，“committed” 的消息就不会丢失。</p>
<h2 id="1-Leader的选择"><a href="#1-Leader的选择" class="headerlink" title="1. Leader的选择"></a>1. Leader的选择</h2><p>Kafka 的核心是日志文件，日志文件在集群中的同步是分布式数据系统最基础的要素。</p>
<p>如果leaders永远不会down的话我们就不需要followers了！一旦leader down掉了，需要在followers中选择一个新的leader.但是followers本身有可能延时太久或者crash，所以必须选择高质量的follower作为leader.必须保证，一旦一个消息被提交了，但是leader down掉了，新选出的leader必须可以提供这条消息。大部分的分布式系统采用了多数投票法则选择新的leader,对于多数投票法则，就是根据所有副本节点的状况动态的选择最适合的作为leader.Kafka并不是使用这种方法。</p>
<p>Kafaka动态维护了一个同步状态的副本的集合（a set of in-sync replicas），简称ISR，在这个集合中的节点都是和leader保持高度一致的，任何一条消息必须被这个集合中的每个节点读取并追加到日志中了，才回通知外部这个消息已经被提交了。因此这个集合中的任何一个节点随时都可以被选为leader.ISR在ZooKeeper中维护。ISR中有f+1个节点，就可以允许在f个节点down掉的情况下不会丢失消息并正常提供服。ISR的成员是动态的，如果一个节点被淘汰了，当它重新达到“同步中”的状态时，他可以重新加入ISR.这种leader的选择方式是非常快速的，适合kafka的应用场景。</p>
<p>一个邪恶的想法：如果所有节点都down掉了怎么办？Kafka对于数据不会丢失的保证，是基于至少一个节点是存活的，一旦所有节点都down了，这个就不能保证了。<br>实际应用中，当所有的副本都down掉时，必须及时作出反应。可以有以下两种选择:</p>
<ol>
<li>等待ISR中的任何一个节点恢复并担任leader。</li>
<li>选择所有节点中（不只是ISR）第一个恢复的节点作为leader.</li>
</ol>
<p>这是一个在可用性和连续性之间的权衡。如果等待ISR中的节点恢复，一旦ISR中的节点起不起来或者数据都是了，那集群就永远恢复不了了。如果等待ISR意外的节点恢复，这个节点的数据就会被作为线上数据，有可能和真实的数据有所出入，因为有些数据它可能还没同步到。Kafka目前选择了第二种策略，在未来的版本中将使这个策略的选择可配置，可以根据场景灵活的选择。<br>这种窘境不只Kafka会遇到，几乎所有的分布式数据系统都会遇到。</p>
<h2 id="2-副本管理"><a href="#2-副本管理" class="headerlink" title="2. 副本管理"></a>2. 副本管理</h2><p>以上仅仅以一个topic一个分区为例子进行了讨论，但实际上一个Kafka将会管理成千上万的topic分区.Kafka尽量的使所有分区均匀的分布到集群所有的节点上而不是集中在某些节点上，另外主从关系也尽量均衡这样每个几点都会担任一定比例的分区的leader。</p>
<p>优化leader的选择过程也是很重要的，它决定了系统发生故障时的空窗期有多久。Kafka选择一个节点作为“controller”,当发现有节点down掉的时候它负责在游泳分区的所有节点中选择新的leader,这使得Kafka可以批量的高效的管理所有分区节点的主从关系。如果controller down掉了，活着的节点中的一个会备切换为新的controller.</p>
<h1 id="九、客户端API"><a href="#九、客户端API" class="headerlink" title="九、客户端API"></a>九、客户端API</h1><h2 id="1-Kafka-Producer-APIs"><a href="#1-Kafka-Producer-APIs" class="headerlink" title="1. Kafka Producer APIs"></a>1. Kafka Producer APIs</h2><p>Kafka Procuder API 有两种，它们分别是：<code>kafka.producer.SyncProducer</code> 和 <code>kafka.producer.async.AsyncProducer</code>。它们都实现了同一个接口：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">Producer</span> </span>&#123;</div><div class="line">    <span class="comment">/* 将消息发送到指定分区 */</span></div><div class="line">    <span class="function">publicvoid <span class="title">send</span><span class="params">(kafka.javaapi.producer.ProducerData&lt;K,V&gt; producerData)</span></span>;</div><div class="line">    </div><div class="line">    <span class="comment">/* 批量发送一批消息 */</span></div><div class="line">    <span class="function">publicvoid <span class="title">send</span><span class="params">(java.util.List&lt;kafka.javaapi.producer.ProducerData&lt;K,V&gt;&gt; producerData)</span></span>;</div><div class="line">    </div><div class="line">    <span class="comment">/* 关闭producer */</span></div><div class="line">    <span class="function">publicvoid <span class="title">close</span><span class="params">()</span></span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>Producer API提供了以下功能：</p>
<ol>
<li>可以将多个消息缓存到本地队列里，然后异步的批量发送到broker，可以通过参数producer.type=async做到。缓存的大小可以通过一些参数指定：queue.time和batch.size。一个后台线程（(kafka.producer.async.ProducerSendThread）从队列中取出数据并让kafka.producer.EventHandler将消息发送到broker，也可以通过参数event.handler定制handler，在producer端处理数据的不同的阶段注册处理器，比如可以对这一过程进行日志追踪，或进行一些监控。只需实现kafka.producer.async.CallbackHandler接口，并在callback.handler中配置。</li>
<li><p>自己编写Encoder来序列化消息，只需实现下面这个接口。默认的Encoder是kafka.serializer.DefaultEncoder。</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="class"><span class="keyword">interface</span> <span class="title">Encoder</span>&lt;<span class="title">T</span>&gt; </span>&#123;</div><div class="line">    <span class="function"><span class="keyword">public</span> Message <span class="title">toMessage</span><span class="params">(T data)</span></span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
</li>
<li><p>提供了基于Zookeeper的broker自动感知能力，可以通过参数zk.connect实现。如果不使用Zookeeper，也可以使用broker.list参数指定一个静态的brokers列表，这样消息将被随机的发送到一个broker上，一旦选中的broker失败了，消息发送也就失败了。</p>
</li>
<li><p>通过分区函数kafka.producer.Partitioner类对消息分区。</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="class"><span class="keyword">interface</span> <span class="title">Partitioner</span>&lt;<span class="title">T</span>&gt; </span>&#123;</div><div class="line">    <span class="function"><span class="keyword">int</span> <span class="title">partition</span><span class="params">(T key, <span class="keyword">int</span> numPartitions)</span></span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
</li>
<li><p>分区函数有两个参数：key和可用的分区数量，从分区列表中选择一个分区并返回id。默认的分区策略是hash(key)%numPartitions.如果key是null,就随机的选择一个。可以通过参数partitioner.class定制分区函数。</p>
</li>
</ol>
<h2 id="2-KafKa-Consumer-APIs"><a href="#2-KafKa-Consumer-APIs" class="headerlink" title="2. KafKa Consumer APIs"></a>2. KafKa Consumer APIs</h2><p>Consumer API有两个级别。低级别的和一个指定的broker保持连接，并在接收完消息后关闭连接，这个级别是无状态的，每次读取消息都带着offset。</p>
<p>高级别的API隐藏了和brokers连接的细节，在不必关心服务端架构的情况下和服务端通信。还可以自己维护消费状态，并可以通过一些条件指定订阅特定的topic,比如白名单黑名单或者正则表达式。</p>
<h3 id="2-1-低级别的API"><a href="#2-1-低级别的API" class="headerlink" title="2.1 低级别的API"></a>2.1 低级别的API</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">SimpleConsumer</span> </span>&#123;</div><div class="line">    <span class="comment">/*向一个broker发送读取请求并得到消息集 */</span></div><div class="line">    <span class="function"><span class="keyword">public</span> ByteBufferMessageSet <span class="title">fetch</span><span class="params">(FetchRequest request)</span></span>;</div><div class="line">    </div><div class="line">    <span class="comment">/*向一个broker发送读取请求并得到一个相应集 */</span></div><div class="line">    <span class="function"><span class="keyword">public</span> MultiFetchResponse <span class="title">multifetch</span><span class="params">(List&lt;FetchRequest&gt; fetches)</span></span>;</div><div class="line">    <span class="comment">/**</span></div><div class="line">    * 得到指定时间之前的offsets</div><div class="line">    * 返回值是offsets列表，以倒序排序</div><div class="line">    * <span class="doctag">@param</span> time: 时间，毫秒,</div><div class="line">    * 如果指定为OffsetRequest$.MODULE$.LATIEST_TIME(), 得到最新的offset.</div><div class="line">    * 如果指定为OffsetRequest$.MODULE$.EARLIEST_TIME(),得到最老的offset.</div><div class="line">    */</div><div class="line">    publiclong[] getOffsetsBefore(String topic, <span class="keyword">int</span> partition, <span class="keyword">long</span> time, <span class="keyword">int</span> maxNumOffsets);</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>低级别的API是高级别API实现的基础，也是为了一些对维持消费状态有特殊需求的场景，比如Hadoop consumer这样的离线consumer。</p>
<h3 id="2-2-高级别的API"><a href="#2-2-高级别的API" class="headerlink" title="2.2 高级别的API"></a>2.2 高级别的API</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div></pre></td><td class="code"><pre><div class="line"><span class="comment">/* 创建连接 */</span></div><div class="line">ConsumerConnector connector = Consumer.create(consumerConfig);</div><div class="line"><span class="class"><span class="keyword">interface</span> <span class="title">ConsumerConnector</span> </span>&#123;</div><div class="line"><span class="comment">/**</span></div><div class="line">* 这个方法可以得到一个流的列表，每个流都是MessageAndMetadata的迭代，</div><div class="line">* 通过MessageAndMetadata可以拿到消息和其他的元数据（目前之后topic）</div><div class="line">* Input: a map of &lt;topic, #streams&gt;</div><div class="line">* Output: a map of &lt;topic, list of message streams&gt;</div><div class="line">*/</div><div class="line"><span class="keyword">public</span> Map&lt;String,List&lt;KafkaStream&gt;&gt; createMessageStreams(Map&lt;String,Int&gt; topicCountMap);</div><div class="line"></div><div class="line"><span class="comment">/**</span></div><div class="line">* 你也可以得到一个流的列表，它包含了符合TopicFiler的消息的迭代，</div><div class="line">* 一个TopicFilter是一个封装了白名单或黑名单的正则表达式。</div><div class="line">*/</div><div class="line"><span class="function"><span class="keyword">public</span> List&lt;KafkaStream&gt; <span class="title">createMessageStreamsByFilter</span><span class="params">(</span></span></div><div class="line">    TopicFilter topicFilter, <span class="keyword">int</span> numStreams);</div><div class="line">    </div><div class="line">    <span class="comment">/* 提交目前消费到的offset */</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="title">commitOffsets</span><span class="params">()</span></span></div><div class="line">    </div><div class="line">    <span class="comment">/* 关闭连接 */</span></div><div class="line">    <span class="keyword">public</span> <span class="title">shutdown</span><span class="params">()</span></div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>这个API围绕着由KafkaStream实现的迭代器展开，每个流代表一系列从一个或多个分区多和broker上汇聚来的消息，每个流由一个线程处理，所以客户端可以在创建的时候通过参数指定想要几个流。一个流是多个分区多个broker的合并，但是每个分区的消息只会流向一个流。</p>
<p>每调用一次createMessageStreams都会将consumer注册到topic上，这样consumer和brokers之间的负载均衡就会进行调整。API鼓励每次调用创建更多的topic流以减少这种调整。createMessageStreamsByFilter方法注册监听可以感知新的符合filter的tipic。</p>
<h1 id="十、消息和日志"><a href="#十、消息和日志" class="headerlink" title="十、消息和日志"></a>十、消息和日志</h1><p>消息由一个固定长度的头部和可变长度的字节数组组成。头部包含了一个版本号和CRC32校验码。</p>
<figure class="highlight nimrod"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line">/**</div><div class="line">* 具有N个字节的消息的格式如下</div><div class="line"></div><div class="line">* 如果版本号是<span class="number">0</span></div><div class="line">* <span class="number">1</span>. <span class="number">1</span>个字节的 <span class="string">"magic"</span> 标记</div><div class="line">* <span class="number">2</span>. <span class="number">4</span>个字节的<span class="type">CRC32</span>校验码</div><div class="line">* <span class="number">3</span>. N - <span class="number">5</span>个字节的具体信息</div><div class="line">*</div><div class="line">* 如果版本号是<span class="number">1</span></div><div class="line">* <span class="number">1</span>. <span class="number">1</span>个字节的 <span class="string">"magic"</span> 标记</div><div class="line">* <span class="number">2</span>.<span class="number">1</span>个字节的参数允许标注一些附加的信息比如是否压缩了，解码类型等</div><div class="line">* <span class="number">3</span>.<span class="number">4</span>个字节的<span class="type">CRC32</span>校验码</div><div class="line">* <span class="number">4</span>. N - <span class="number">6</span> 个字节的具体信息</div><div class="line">*/</div></pre></td></tr></table></figure>
<h2 id="1-日志"><a href="#1-日志" class="headerlink" title="1. 日志"></a>1. 日志</h2><p>一个叫做“my_topic”且有两个分区的的topic,它的日志有两个文件夹组成，my_topic_0和my_topic_1,每个文件夹里放着具体的数据文件，每个数据文件都是一系列的日志实体，每个日志实体有一个4个字节的整数N标注消息的长度，后边跟着N个字节的消息。每个消息都可以由一个64位的整数offset标注，offset标注了这条消息在发送到这个分区的消息流中的起始位置。每个日志文件的名称都是这个文件第一条日志的offset.所以第一个日志文件的名字就是00000000000.kafka.所以每相邻的两个文件名字的差就是一个数字S,S差不多就是配置文件中指定的日志文件的最大容量。</p>
<p>消息的格式都由一个统一的接口维护，所以消息可以在producer,broker和consumer之间无缝的传递。存储在硬盘上的消息格式如下所示：</p>
<ol>
<li>消息长度: 4 bytes (value: 1+4+n)</li>
<li>版本号: 1 byte</li>
<li>CRC校验码: 4 bytes</li>
<li>具体的消息: n bytes</li>
</ol>
<p><img src="http://oapjp6spr.bkt.clouddn.com/20161009005.png" alt=""></p>
<h2 id="2-写操作"><a href="#2-写操作" class="headerlink" title="2. 写操作"></a>2. 写操作</h2><p>消息被不断的追加到最后一个日志的末尾，当日志的大小达到一个指定的值时就会产生一个新的文件。对于写操作有两个参数，一个规定了消息的数量达到这个值时必须将数据刷新到硬盘上，另外一个规定了刷新到硬盘的时间间隔，这对数据的持久性是个保证，在系统崩溃的时候只会丢失一定数量的消息或者一个时间段的消息。</p>
<h2 id="3-读操作"><a href="#3-读操作" class="headerlink" title="3. 读操作"></a>3. 读操作</h2><p>需要两个参数：一个64位的offset和一个S字节的最大读取量。S通常比单个消息的大小要大，但在一些个别消息比较大的情况下，S会小于单个消息的大小。这种情况下读操作会不断重试，每次重试都会将读取量加倍，直到读取到一个完整的消息。可以配置单个消息的最大值，这样服务器就会拒绝大小超过这个值的消息。也可以给客户端指定一个尝试读取的最大上限，避免为了读到一个完整的消息而无限次的重试。</p>
<p>在实际执行读取操纵时，首先需要定位数据所在的日志文件，然后根据offset计算出在这个日志中的offset(前面的的offset是整个分区的offset),然后在这个offset的位置进行读取。定位操作是由二分查找法完成的，Kafka在内存中为每个文件维护了offset的范围。</p>
<p>下面是发送给 consumer 的结果的格式：</p>
<figure class="highlight nimrod"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line"><span class="type">MessageSetSend</span> (fetch <span class="literal">result</span>)</div><div class="line"></div><div class="line">total length     : <span class="number">4</span> bytes</div><div class="line">error code       : <span class="number">2</span> bytes</div><div class="line">message <span class="number">1</span>        : x bytes</div><div class="line">...</div><div class="line">message n        : x bytes</div><div class="line"><span class="type">MultiMessageSetSend</span> (multiFetch <span class="literal">result</span>)</div><div class="line"></div><div class="line">total length       : <span class="number">4</span> bytes</div><div class="line">error code         : <span class="number">2</span> bytes</div><div class="line">messageSetSend <span class="number">1</span></div><div class="line">...</div><div class="line">messageSetSend n</div></pre></td></tr></table></figure>
<h2 id="4-删除"><a href="#4-删除" class="headerlink" title="4. 删除"></a>4. 删除</h2><p>日志管理器允许定制删除策略。目前的策略是删除修改时间在N天之前的日志（按时间删除），也可以使用另外一个策略：保留最后的N GB数据的策略(按大小删除)。为了避免在删除时阻塞读操作，采用了copy-on-write形式的实现，删除操作进行时，读取操作的二分查找功能实际是在一个静态的快照副本上进行的，这类似于Java的CopyOnWriteArrayList。</p>
<h2 id="5-可靠性保证"><a href="#5-可靠性保证" class="headerlink" title="5. 可靠性保证"></a>5. 可靠性保证</h2><p>日志文件有一个可配置的参数M，缓存超过这个数量的消息将被强行刷新到硬盘。一个日志矫正线程将循环检查最新的日志文件中的消息确认每个消息都是合法的。合法的标准为：所有文件的大小的和最大的offset小于日志文件的大小，并且消息的CRC32校验码与存储在消息实体中的校验码一致。如果在某个offset发现不合法的消息，从这个offset到下一个合法的offset之间的内容将被移除。</p>
<p>有两种情况必须考虑：</p>
<ol>
<li>当发生崩溃时有些数据块未能写入。</li>
<li>写入了一些空白数据块。第二种情况的原因是，对于每个文件，操作系统都有一个inode（inode是指在许多“类Unix文件系统”中的一种数据结构。每个inode保存了文件系统中的一个文件系统对象,包括文件、目录、大小、设备文件、socket、管道, 等等），但无法保证更新inode和写入数据的顺序，当inode保存的大小信息被更新了，但写入数据时发生了崩溃，就产生了空白数据块。CRC校验码可以检查这些块并移除，当然因为崩溃而未写入的数据块也就丢失了。</li>
</ol>
<hr>
<p><a href="http://blog.csdn.net/honglei915/article/category/2383433" target="_blank" rel="external">原文地址</a></p>
]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;一、基本概念&quot;&gt;&lt;a href=&quot;#一、基本概念&quot; class=&quot;headerlink&quot; title=&quot;一、基本概念&quot;&gt;&lt;/a&gt;一、基本概念&lt;/h1&gt;&lt;h2 id=&quot;1-介绍&quot;&gt;&lt;a href=&quot;#1-介绍&quot; class=&quot;headerlink&quot; title=&quot;1. 介绍&quot;&gt;&lt;/a&gt;1. 介绍&lt;/h2&gt;&lt;p&gt;Kafka 是一个分布式的、可分区的、可复制的消息系统。它提供了普通消息系统的功能，但具有自己独特的设计。&lt;strong&gt;这个独特的设计是什么样的呢？&lt;/strong&gt;&lt;/p&gt;
&lt;!-- ![][1] --&gt;
&lt;img src=&quot;http://oapjp6spr.bkt.clouddn.com/kafka-logo.png&quot; width=&quot;400&quot;&gt;
    
    </summary>
    
      <category term="Java开发技术" scheme="http://ehlxr.me/categories/Java%E5%BC%80%E5%8F%91%E6%8A%80%E6%9C%AF/"/>
    
    
      <category term="Kafka" scheme="http://ehlxr.me/tags/Kafka/"/>
    
  </entry>
  
  <entry>
    <title>闲言碎语，不知所云...</title>
    <link href="http://ehlxr.me/2016/09/28/%E9%97%B2%E8%A8%80%E7%A2%8E%E8%AF%AD%EF%BC%8C%E4%B8%8D%E7%9F%A5%E6%89%80%E4%BA%91/"/>
    <id>http://ehlxr.me/2016/09/28/闲言碎语，不知所云/</id>
    <published>2016-09-28T05:34:18.000Z</published>
    <updated>2016-11-01T09:31:10.237Z</updated>
    
    <content type="html"><![CDATA[<blockquote>
<p>闲言碎语，不知所云，乱七八糟，聊以自慰…</p>
</blockquote>
<p>搭建博客有一段时间了，记录总结的基本都是技术相关的，对于一个有强迫症加语文学的不好的人来说，总结技术文章太痛苦了，总结一篇文章得纠结好久，总觉得组织的语言不够恰当准确，每次都是改了又改，反复琢磨，怎奈肚子里的墨水实在是少的可怜，真是羡慕那些可以把自己心里所想的东西用文字能够表达很清楚的人。</p>
<p>说到底还是看的东西少，缺少写东西的锻炼，青春迷茫的时候有大把机会可以利用，可惜都不知道把时间用在了哪儿，等慢慢想要沉淀的时候才发现工作和生活中琐碎已经占据了所有的时间。但不管怎样，从此刻启程，做一些自己想要做的事儿，我想应该不会太晚吧！</p>
<a id="more"></a>
<p>搭建 Hexo 博客的初衷之一是觉得对于身为码农的我来说，Hexo 好玩，有新鲜感，对于非码农来说有一定的门槛（显的逼格高）。之二就是书写简单，不必局限于单一的编辑工具，少了刻意去追求排版样式烦恼。之三是觉得安全可靠，文章资源一切都可以掌控与自己，不必担心丢失，之前也买过 VPS 摆弄过 WordPress ，最后 VPS 租期到了，那段时间忙于找工作，博客的内容也没有及时保存下来，虽说博客没多少东西，但始终觉得有些遗憾…</p>
<p>夜深人不静，半夜公司楼下打车真是不好打。这几天每天到家都凌晨以后了，身体真是大不如前了…</p>
<iframe frameborder="no" border="0" marginwidth="0" marginheight="0" width="100%" height="86" src="http://music.163.com/outchain/player?type=2&id=126946&auto=1&height=66"></iframe>

<hr>
]]></content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt;闲言碎语，不知所云，乱七八糟，聊以自慰…&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;搭建博客有一段时间了，记录总结的基本都是技术相关的，对于一个有强迫症加语文学的不好的人来说，总结技术文章太痛苦了，总结一篇文章得纠结好久，总觉得组织的语言不够恰当准确，每次都是改了又改，反复琢磨，怎奈肚子里的墨水实在是少的可怜，真是羡慕那些可以把自己心里所想的东西用文字能够表达很清楚的人。&lt;/p&gt;
&lt;p&gt;说到底还是看的东西少，缺少写东西的锻炼，青春迷茫的时候有大把机会可以利用，可惜都不知道把时间用在了哪儿，等慢慢想要沉淀的时候才发现工作和生活中琐碎已经占据了所有的时间。但不管怎样，从此刻启程，做一些自己想要做的事儿，我想应该不会太晚吧！&lt;/p&gt;
    
    </summary>
    
      <category term="杂谈" scheme="http://ehlxr.me/categories/%E6%9D%82%E8%B0%88/"/>
    
    
      <category term="杂谈" scheme="http://ehlxr.me/tags/%E6%9D%82%E8%B0%88/"/>
    
  </entry>
  
</feed>
